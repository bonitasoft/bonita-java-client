openapi: 3.0.2
info:
  description: "<p> \n<a download=\"openapi.yaml\" href=\"./openapi.yaml\" target=\"\
    _blank\" class=\"btn-download\">Download OpenAPI specification</a>\n<a download=\"\
    postman.json\" href=\"./postman.json\" target=\"_blank\" class=\"btn-download\"\
    >Download Postman collection</a>\n</p>\n\n<hr>\n\nThe REST API lets you access\
    \ the data with HTTP requests; it is useful when implementing rich web forms /\
    \ pages for a good user experience.\n\nAn open source [java client](https://github.com/bonitasoft/bonita-java-client)\
    \ is implemented above the HTTP API. It is available on [Maven central](https://search.maven.org/search?q=g:%22org.bonitasoft.web%22%20AND%20a:%22bonita-java-client%22).\n\
    \nIf your application is using a technology other than Java, you can integrate\
    \ it with the Bonita solution using the Web REST API. This API provides\naccess\
    \ to all Bonita objects (like processes, tasks, users, connectors etc.), to execute\
    \ operations on them (create, retrieve, update, delete).\nYou can use these operations\
    \ to create a workflow with Bonita and integrate it into your application. The\
    \ Bonita Engine remains responsible for executing\nthe workflow logic (connectors,\
    \ gateways with conditions, messages, timers etc.) while your application gives\
    \ access to the workflow.\nUsers can manage processes and tasks, and perform administrative\
    \ activities.\n\n### API Extensions\n\nYou can create [Rest API Extensions](https://documentation.bonitasoft.com/bonita/latest/api/rest-api-extensions)\
    \ to extend the Rest API by adding missing resources (not provided by the Rest\
    \ API).\nIt is possible for an extension to interact with the engine (via the\
    \ API) or with any other external service (for example a database, a directory,\
    \ or a web service).\n\n### Create a resource\n\n| Request URL | `http://.../API/{API_name}/{resource_name}/\
    \  `|\n|:-|:-|\n| Request Method | POST|\n| Request Payload | an item in JSON|\n\
    | Response | the same item in JSON, containing the values provided in the posted\
    \ item, completed with default values and identifiers provided by Bonita Engine.|\n\
    \n### Read a resource\n\n| Request URL | `http://.../API/{API_name}/{resource_name}/{id}\
    \ `|\n|:-|:-|\n| Request Method | GET|\n| Response | an item in JSON|\n\nExample\
    \ `http://.../API/identity/user/5 `\n\n#### Extend resource response\n\nOn some\
    \ resources, in GET methods the `d` (deploy) URL query parameter can be used to\
    \ extend the response objects. The value of this parameter consists of an attribute\
    \ for which you want to make an extended request (called a deploy) and retrieve\
    \ attributes of a linked resource.\nThis means that instead of retrieving the\
    \ ID or a parent or referenced resource, you can retrieve the full object.\n\n\
    For example, when you retrieve a task, you can also retrieve the process definition\
    \ attributes in addition to the process definition ID that is already part of\
    \ the task resource.\nThe supported deploy values for a task include its process\
    \ (d=processId).\n\nSpecifiy multiple `d` parameter to extend several resources.\
    \ For instance, to retrieve the flow node of id 143 and the associated process,\
    \ process instance and assigned user, call `/API/bpm/flowNode/143?d=processId&d=caseId&d=assigned_id`\n\
    \n#### With compound identifier\n\nThe order of the identifier parts for each\
    \ resource type is given in the table above.\n\n| Request URL | `http://.../API/{API_name}/{resource_name}/{id_part1}/{id_part2}\
    \ `|\n|:-|:-|\n| Request Method | GET|\n| Response | an item in JSON|\n\nExample\
    \ `http://.../API/identity/membership/5/12/24 `\n\n### Update a resource\n\n|\
    \ Request URL | `http://.../API/{API_name}/{resource_name}/{id} `|\n|:-|:-|\n\
    | Request Method | PUT|\n| Request Payload | a map in JSON containing the new\
    \ values for the attributes you want to change.|\n| Response | the corresponding\
    \ item in JSON with new values where you requested a modification|\n\nExample\
    \ `http://.../API/identity/user/5`\n\n#### With compound identifier:\n\nResponse:\
    \ the corresponding item in JSON with new values where you requested a modification.\n\
    \n| Request URL | `http://.../API/{API_name}/{resource_name}/{id_part1}/{id_part2}\
    \ `|\n|:-|:-|\n| Request Method | PUT|\n| Request Payload | ` a map in JSON containing\
    \ the new values for the attributes you want to change `|\n| Response | ` the\
    \ corresponding item in JSON with new values where you requested a modification`|\n\
    \nExample\n`http://.../API/identity/membership/5/12/24 `\n\n### Delete resources\n\
    \nUse the DELETE request to remove multiple resources.\n\n| Request URL | `http://.../API/{API_name}/{resource_name}/\
    \ `|\n|:-|:-|\n| Request Method | DELETE|\n| Request Payload | A list of identifiers\
    \ in JSON, for example `[\"id1\",\"id2\",\"id3\"]`. Compound identifiers are separated\
    \ by '/' characters.|\n| Response | `empty `|\n\nExample\n`http://.../API/identity/membership/\
    \ `\n\n### Search for a resource\n\nThe required object is specified with a set\
    \ of filters in the request URL. The URL parameters must be URL-encoded.\n\nResults\
    \ are returned in a paged list, so you have to specify the page (counting from\
    \ zero), and the number of results per page (count), additionally you can define\
    \ a sort key (order). You can see the total number of matching results in the\
    \ HTTP response header Content-Range.\nIf you are searching for business data\
    \ using a custom query, there must be a [count query in the BDM](https://documentation.bonitasoft.com/bonita/latest/data/define-and-deploy-the-bdm).\
    \ If there is no count query, results from a custom query on business data cannot\
    \ be paged properly (the header Content-Range will be absent).\nFor business data\
    \ default queries, the count query is defined automatically.\n\nThe available\
    \ filters are the attributes of the item plus some specific filters defined by\
    \ each item.\n\n| Request URL | `http://.../API/{API_name}/{resource_name}?p={page}&c={count}&o={order}&s={query}&f={filter_name}={filter_value}&f=...\
    \ `|\n|:-|:-|\n| Request Method | GET|\n| Response | an array of items in JSON|\n\
    \nExample\n`/API/identity/user?p=0&c=10&o=firstname&s=test&f=manager_id=3`\n\n\
    For a GET method that retrieves more than one instance of a resource, you can\
    \ specify the following request parameters:\n\n* p (Mandatory): index of the page\
    \ to display\n* c (Mandatory): maximum number of elements to retrieve\n* o: order\
    \ of presentation of values in response: must be either `attributeName ASC` or\
    \ `attributeName DESC`. The final order parameter value must be URL encoded.\n\
    * f: list of filters, specified as `attributeName=attributeValue`. To filter on\
    \ more than one attribute, specify an f parameters for each attribute. The final\
    \ filter parameter value must be URL encoded.\n  The attributes you can filter\
    \ on are specific to the resource.\n* s: search on name or search indexes. Before\
    \ Bonita 2024.1, the matching policy depended on the configuration of [word-based\
    \ search](https://documentation.bonitasoft.com/bonita/2023.2/api/using-list-and-search-methods#word_based_search).\n\
    \  For example, if word-based search was enabled, `s=Valid` returned matches containing\
    \ the string \"valid\" at the start of any word in the attribute value word,\n\
    \  such as \"Valid address\", \"Not a valid address\", and \"Validated request\"\
    \ but not \"Invalid request\".\n  If word-based search was disabled, `s=Valid`\
    \ returned matches containing the string \"valid\" at the start of the attribute\
    \ value, such as \"Valid address\" or \"Validated request\" but not \"Not a valid\
    \ address\" or \"Invalid request\".\n  Since Bonita 2024.1, the search mode can\
    \ no longer be configured and a \"like-based\" algorithm is used. This means all\
    \ the matching records for which the search term occurs anywhere in a phrase or\
    \ a word are returned.\n\n### Errors\n\nThe API uses standard HTTP status codes\
    \ to indicate the success or failure of the API call.\n\nIf you get a `401` response\
    \ code :\n  - make sure that the cookies have been transfered with the call\n\
    \  - make sure that the cookies transfered are the ones generated during the last\
    \ sucessfull login call\n  - if one of the PUT, DELETE or POST method is used,\
    \ make sure that the `X-Bonita-API-Token` header is included\n  - if the X-Bonita-API-Token\
    \ header is included, make sure that the value is the same as the one of the cookie\
    \ generated during the last login\n  - Maybe a logout was issued or the session\
    \ has expired; try to log in again, and re run the request with the new cookies\
    \ and the new value for the `X-Bonita-API-Token` header.\n"
  license:
    name: GPL-v2.0
    url: http://www.gnu.org/licenses/gpl-2.0.txt
  title: Bonita API
  version: 0.0.18
  x-logo:
    url: images/bonitasoft-logo.svg
    backgroundColor: '#19465f'
    altText: Bonita API
    href: /
servers:
- description: Sample url for a local development server.
  url: http://localhost:8080/bonita
security:
- bonita_auth: []
  bonita_token: []
tags:
- description: Activity
  name: Activity
  x-displayName: Activity
- description: ActivityVariable
  name: ActivityVariable
  x-displayName: ActivityVariable
- description: ArchivedActivityVariable
  name: ArchivedActivityVariable
  x-displayName: ArchivedActivityVariable
- description: Actor
  name: Actor
  x-displayName: Actor
- description: ActorMember
  name: ActorMember
  x-displayName: ActorMember
- description: Manage applications. This enables you to build a consistent functional
    applicative environment for users to interact with business processes and business
    data from one place.
  name: Application
  x-displayName: Application
- description: |
    Manage the set of menus in an application. This set of menus enables a user to navigate to the application pages.

    There are two types of menu item:

    A top-level item appears in the navigation bar of the application. A top-level item can be clickable, leading to a page, or can be a parent for a menu of clickable items.
    A child menu item becomes visible in a menu when the parent is selected. A child menu item is clickable and leads to a page.
    Each menu item has an index that defines the position in the menu. For a top-level menu item, this is the position in the the navigation bar counting from the left. For a child menu item, this is the position in the menu counting from the top.
  name: ApplicationMenu
  x-displayName: ApplicationMenu
- description: |
    An application page is a custom page that has been associated with an application. Use this resource to manage application pages and define the paths used to access them. This list of pages will be used to build the application menus.
  name: ApplicationPage
  x-displayName: ApplicationPage
- description: ArchivedActivity
  name: ArchivedActivity
  x-displayName: ArchivedActivity
- description: ArchivedProcessInstance
  name: ArchivedProcessInstance
  x-displayName: ArchivedProcessInstance
- description: ArchivedProcessInstanceComment
  name: ArchivedProcessInstanceComment
  x-displayName: ArchivedProcessInstanceComment
- description: ArchivedProcessInstanceDocument
  name: ArchivedProcessInstanceDocument
  x-displayName: ArchivedProcessInstanceDocument
- description: ArchivedConnectorInstance
  name: ArchivedConnectorInstance
  x-displayName: ArchivedConnectorInstance
- description: ArchivedFlowNode
  name: ArchivedFlowNode
  x-displayName: ArchivedFlowNode
- description: ArchivedHumanTask
  name: ArchivedHumanTask
  x-displayName: ArchivedHumanTask
- description: ArchivedManualTask
  name: ArchivedManualTask
  x-displayName: ArchivedManualTask
- description: ArchivedTask
  name: ArchivedTask
  x-displayName: ArchivedTask
- description: ArchivedUserTask
  name: ArchivedUserTask
  x-displayName: ArchivedUserTask
- description: Portal Authentication
  name: PortalAuthentication
  x-displayName: Portal Authentication
- description: Platform Authentication
  name: PlatformAuthentication
  x-displayName: Platform Authentication
- description: |
    Show status or install or update the Business Data Model.

    Installing or updating a BDM on your tenant needs to be done in two successive steps:

    1. Upload a BDM file
    2. Install/Update the previously uploaded file

    **To do this, your tenant services need to be paused.**

    **In Enterprise editions, if you have an access control file installed on your tenant, you need to delete it before installing or updating your BDM.**
  name: BDM
  x-displayName: Business Data Model
- description: "BDM Access control is available to protect the tenant BDM. You can\
    \ use this API to get the access control status (lastUpdatedBy, lastUpdateDate...)."
  name: BDMAccessControl
  x-displayName: BDMAccessControl
- description: BDM Rest APIs allow to query Bonita Business Data.
  name: BusinessDataQuery
  x-displayName: BusinessDataQuery
- description: "Easily retrieve human or service tasks, call activities, and subprocesses\
    \ with BPM APIs. Perform maintenance tasks."
  name: BPM
  x-displayName: BPM
- description: ProcessInstance
  name: ProcessInstance
  x-displayName: ProcessInstance
- description: ProcessInstanceComment
  name: ProcessInstanceComment
  x-displayName: ProcessInstanceComment
- description: ProcessInstanceDocument
  name: ProcessInstanceDocument
  x-displayName: ProcessInstanceDocument
- description: ProcessInstanceInfo
  name: ProcessInstanceInfo
  x-displayName: ProcessInstanceInfo
- description: ProcessInstanceVariable
  name: ProcessInstanceVariable
  x-displayName: ProcessInstanceVariable
- description: ArchivedProcessInstanceVariable
  name: ArchivedProcessInstanceVariable
  x-displayName: ArchivedProcessInstanceVariable
- description: ConnectorFailure
  name: ConnectorFailure
  x-displayName: ConnectorFailure
- description: ConnectorInstance
  name: ConnectorInstance
  x-displayName: ConnectorInstance
- description: CustomUser
  name: CustomUser
  x-displayName: CustomUser
- description: CustomUserDefinition
  name: CustomUserDefinition
  x-displayName: CustomUserDefinition
- description: CustomUserValue
  name: CustomUserValue
  x-displayName: CustomUserValue
- description: Diagram
  name: Diagram
  x-displayName: Diagram
- description: ProcessInfo
  name: ProcessInfo
  x-displayName: ProcessInfo
- description: FlowNode
  name: FlowNode
  x-displayName: FlowNode
- description: FormMappingBDM
  name: FormMappingBDM
  x-displayName: FormMappingBDM
- description: The group a user belongs to. Groups have a hierarchy (subgroups can
    be created inside a group).
  name: Group
  x-displayName: Group
- description: HumanTask
  name: HumanTask
  x-displayName: HumanTask
- description: I18nlocale
  name: I18nlocale
  x-displayName: I18nlocale
- description: I18nTranslation
  name: I18ntranslation
  x-displayName: I18nTranslation
- description: |
    Handle the license information. This requires a platform session. Log in using the platform login service.
    This Web REST API is available in **Enterprise editions only**, since version 7.11.
  name: License
  x-displayName: License
- description: ManualTask
  name: ManualTask
  x-displayName: ManualTask
- description: "Manage membership of users. There is a membership when a user belongs\
    \ to a group and a role. Use this resource to add, search, and delete memberships."
  name: Membership
  x-displayName: Membership
- description: Message
  name: Message
  x-displayName: Message
- description: "Use the page resource to access custom pages, UI Designer pages, layouts\
    \ or forms and REST API extensions."
  name: Page
  x-displayName: Page
- description: "The Platform API resources require a platform session. In order to\
    \ get one, log in as the platform administrator using the platform login service."
  name: Platform
  x-displayName: Platform
- description: PlatformTenant
  name: PlatformTenant
  x-displayName: PlatformTenant
- description: "Deploy and manage process definitions. In addition, you can instantiate\
    \ a process, which will create a new process instance (case)."
  name: Process
  x-displayName: Process
- description: ProcessConnectorDependency
  name: ProcessConnectorDependency
  x-displayName: ProcessConnectorDependency
- description: ProcessParameter
  name: ProcessParameter
  x-displayName: ProcessParameter
- description: ProcessResolutionProblem
  name: ProcessResolutionProblem
  x-displayName: ProcessResolutionProblem
- description: ProcessSupervisor
  name: ProcessSupervisor
  x-displayName: ProcessSupervisor
- description: ProfessionalContactData
  name: ProfessionalContactData
  x-displayName: ProfessionalContactData
- description: Profile
  name: Profile
  x-displayName: Profile
- description: ProfileEntry
  name: ProfileEntry
  x-displayName: ProfileEntry
- description: ProfileMember
  name: ProfileMember
  x-displayName: ProfileMember
- description: Role
  name: Role
  x-displayName: Role
- description: Session
  name: Session
  x-displayName: Session
- description: SystemTenant
  name: SystemTenant
  x-displayName: SystemTenant
- description: Task
  name: Task
  x-displayName: Task
- description: Handle the tenants (**Enterprise editions only**). This requires a
    platform session. Log in using the platform login service.
  name: Tenant
  x-displayName: Tenant
- description: Theme
  name: Theme
  x-displayName: Theme
- description: TimerEventTrigger
  name: TimerEventTrigger
  x-displayName: TimerEventTrigger
- description: User
  name: User
  x-displayName: User
- description: UserTask
  name: UserTask
  x-displayName: UserTask
- description: |
    Create REST API extensions to use third party systems (databases, web services, Bonita Engine, etc) data in forms and pages.

    REST API extensions can be used to query business data, Bonita Engine APIs, or an external information system (such as a database, web service, LDAP directory...). They also help to keep a clean separation between the front-end (forms, pages, and interfaces visible to users) and the back-end (processes).
  externalDocs:
    url: https://documentation.bonitasoft.com/bonita/latest/rest-api-extensions
  name: RestAPIextensions
  x-displayName: API extensions
paths:
  /loginservice:
    post:
      description: |
        A call to the `/loginservice` will generates a set-cookie header in the response.

        The `JSESSIONID` cookie must be transfered with each subsequent calls. (If the REST API is used in an application running in a web browser, this is handled automatically by the web browser just like any cookies).

        Additional protection agains CSRF attacks is enabled by default for all fresh installations This security relies on `X-Bonita-API-Token` information.
        The `X-Bonita-API-Token` value can be found in the cookie named: `X-Bonita-API-Token`.

        All the subsequence REST API calls performing changes in the system using DELETE, POST, or PUT HTTP methods must contain the **HTTP header** below:

        ``` X-Bonita-API-Token: example-dummy-not-be-used-value ```
      operationId: login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "204":
          description: Login success
          headers:
            Set-Cookie:
              description: Session cookie
              explode: false
              schema:
                example: JSESSIONID=C5385BFEE2969D9E46F0160C1952B0F1; Path=/bonita;
                  HttpOnly; SameSite=Lax
                type: string
              style: simple
            X-Bonita-API-Token:
              description: X-Bonita-API-Token - CSRF token (also present in the cookie
                response)
              example: ed27cbeb-9953-4d77-b5a2-1f62a6c2e0bb
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      security: []
      summary: Login
      tags:
      - Authentication
      - PortalAuthentication
      x-codeSamples:
      - lang: Shell
        label: Curl
        source: "# Generate cookie file\ncurl -v -c saved_cookies.txt \\\n--url 'http://localhost:8080/bonita/loginservice'\
          \ \\\n--header 'Content-Type: application/x-www-form-urlencoded'\n  --data-urlencode\
          \ 'username=install' \\\n  --data-urlencode 'password=install' \\\n  --data-urlencode\
          \ 'redirect=false' \\\n  --data-urlencode 'redirectURL='\n  \n  # Reuse\
          \ the cookie file and set the `X-Bonita-API-Token` header\n  curl -b saved_cookies.txt\
          \ -X GET \\\n-- header 'X-Bonita-API-Token: <token>' \\\n--url 'http://localhost:8080/bonita/API/bpm/process?c=100&p=0'\n"
      x-content-type: application/x-www-form-urlencoded
      x-accepts:
      - application/json
  /logoutservice:
    get:
      description: |
        Logout the current user from the system
      operationId: logout
      parameters:
      - description: Setting the redirect parameter to false indicates that the service
          should not redirect to the login page after logging out.
        example:
          redirect: "false"
          redirectURL: null
        explode: true
        in: query
        name: redirect
        required: false
        schema:
          maxLength: 5
          pattern: ^(?:tru|fals)e$
          type: string
        style: form
      responses:
        "200":
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Logout the current user
      tags:
      - Authentication
      - PortalAuthentication
      x-codeSamples:
      - lang: Shell
        label: Curl
        source: |
          curl -b saved_cookies.txt -X GET --url 'http://localhost:8080/bonita/logoutservice?redirect=false'
      x-accepts:
      - application/json
  /API/living/application:
    get:
      description: |
        Finds living applications with pagination params and filters

        - can order on `id`,`creationDate`, `createdBy`, `profileId`, `token`, `displayName`, `updatedBy`, `lastUpdateDate`, `version`, `link`
        - can search on `token`, `displayName`, `version`, `link`
        - can filter on `token`, `displayName`, `version`, `link`, `profileId`, `creationDate`, `createdBy`, `updatedBy` , `lastUpdateDate`, `userId`
      operationId: searchApplications
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - id: "306"
                link: "true"
                creationDate: "1411548289900"
                icon: ""
                createdBy": "1"
                profileId: "2"
                description: My application link description
                token: myadvapp
                state: ACTIVATED
                displayName: My app link
                updatedBy: "1"
                visibility: ALL
                editable: "true"
                lastUpdateDate: "1411548289900"
                version: "1.0"
              - id: "305"
                link: "false"
                creationDate: "1411548289900"
                icon: ""
                createdBy": "1"
                profileId: "2"
                description: My application description
                token: myapp
                state: DEACTIVATED
                displayName: My app
                updatedBy: "1"
                visibility: ALL
                editable: "true"
                lastUpdateDate: "1411548289900"
                version: "1.0"
                homePageId: "26"
                themeId: "1"
                layoutId: "3"
              schema:
                items:
                  $ref: '#/components/schemas/Application'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds living applications
      tags:
      - Application
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        Create a living applications

        Warning: as of 9.0.0, creating a living application using this API is deprecated.
      operationId: createApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
        description: Partial living application description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegacyApplication'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create a living application
      tags:
      - Application
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/living/application/{id}:
    delete:
      description: |
        Delete a single application for the given ID
      operationId: deleteApplicationById
      parameters:
      - description: ID of application to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete a living application by ID
      tags:
      - Application
      x-accepts:
      - application/json
    get:
      description: |
        Returns a single application for the given ID
      operationId: getApplicationById
      parameters:
      - description: ID of application to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds a living application by ID
      tags:
      - Application
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        Update a single application for the given ID

        Warning: as of 9.0.0, updating a living application using this API is deprecated.
      operationId: updateApplicationById
      parameters:
      - description: ID of application to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationUpdateRequest'
        description: Partial living application description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegacyApplication'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update a living application by ID
      tags:
      - Application
      x-content-type: application/json
      x-accepts:
      - application/json
  /services/application/import:
    post:
      deprecated: true
      description: |
        Import a single application

        Warning: as of 9.0.0, importing a living application using this service is deprecated.
      operationId: importApplication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/importApplication_request'
      responses:
        "200":
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Import a living application
      tags:
      - Application
      x-content-type: application/x-www-form-urlencoded
      x-accepts:
      - application/json
  /portal/applicationsUpload:
    post:
      deprecated: true
      description: |
        Upload application

        Warning: as of 9.0.0, uploading a living application using the portal is deprecated.
      operationId: uploadApplication
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: tmp_application_data.xml
                maxLength: 250
                pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
                type: string
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Upload a living application
      tags:
      - Application
      - Upload
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/plain
  /API/living/application-menu:
    get:
      description: |
        Returns application menus with pagination params and filters

        - can order on `id`, `displayName`, `applicationId`, `applicationPageId`, `menuIndex`, `parentMenuId`
        - can search on `displayName`
        - can filter on `id`, `displayName`, `applicationId`, `applicationPageId`, `menuIndex`, `parentMenuId`
      operationId: searchApplicationMenus
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationMenu'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds application menus
      tags:
      - ApplicationMenu
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        Create an application menu item

        Warning: as of 9.0.0, creating an application menu item using this API is deprecated.
      operationId: createApplicationMenu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationMenuCreateRequest'
        description: A partial representation of an application menu in JSON
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationMenu'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: New application menu item
      tags:
      - ApplicationMenu
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/living/application-menu/{id}:
    delete:
      description: Delete a single application menu for the given ID
      operationId: deleteApplicationMenuById
      parameters:
      - description: ID of the application menu to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete an application menu by ID
      tags:
      - ApplicationMenu
      x-accepts:
      - application/json
    get:
      description: |
        Returns a single application menu for the given ID
      operationId: geApplicationMenuById
      parameters:
      - description: ID of application menu to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                id: "9823"
                displayName: menuLabel
                applicationId: "1"
                applicationPageId: "5"
                menuIndex: "1"
                parentMenuId: "-1"
              schema:
                $ref: '#/components/schemas/ApplicationMenu'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds a application menu by ID
      tags:
      - ApplicationMenu
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        Update an application menu for the given ID

        Warning: as of 9.0.0, updating an application menu item using this API is deprecated.
      operationId: updateApplicationMenuById
      parameters:
      - description: ID of the application menu to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationMenuUpdateRequest'
        description: Partial application menu description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update an application menu by ID
      tags:
      - ApplicationMenu
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/living/application-page:
    get:
      description: |
        Finds application pages with pagination params and filters

        - can order on `id`, `token`, `applicationId`, `pageId`
        - can search on `token`
        - can filter on `id`, `token`, `applicationId`, `pageId`
      operationId: searchApplicationPages
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationPage'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds application pages
      tags:
      - ApplicationPage
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        Create an application page

        Warning: as of 9.0.0, creating an application page using this API is deprecated.
      operationId: createApplicationPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationPageCreateRequest'
        description: Partial application page description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationPage'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create an application page
      tags:
      - ApplicationPage
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/living/application-page/{id}:
    delete:
      description: |
        Delete a single application page for the given ID
      operationId: deleteApplicationPageById
      parameters:
      - description: ID of application page to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete an application page by ID
      tags:
      - ApplicationPage
      x-accepts:
      - application/json
    get:
      description: |
        Returns a single application page for the given ID
      operationId: getApplicationPageById
      parameters:
      - description: ID of application page to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationPage'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds an application page by ID
      tags:
      - ApplicationPage
      x-accepts:
      - application/json
  /API/bdm/businessData/{businessDataType}:
    get:
      description: |
        Finds Business Data with pagination params and filters by calling a `Named Query`.
        The business data query REST API resource is used to call a default or custom business data query. It is available from version 6.5.

        **Data parameters**:

          * businessDataType - the fully-qualified business data type name
          * q=queryName - the query name
          * p=0 - the page number
          * c=10 - the maximum number of results in the page
          * f=parameter=value - sets the parameter value according to business data query parameters defined in Bonita Studio
          For a Boolean parameter, the accepted values are `true` or `false`.

          By default, for a Date parameter can use the following formats:

          * yyyy-MM-dd
          * HH:mm:ss
          * yyyy-MM-dd HH:mm:ss
          * yyyy-MM-dd'T'HH:mm:ss
          * yyyy-MM-dd'T'HH:mm:ss.SSS
      operationId: searchBusinessData
      parameters:
      - description: Business Data Type
        example: com.company.model.Employee
        explode: false
        in: path
        name: businessDataType
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Named query to use
        example: searchEmployeeByFirstNameAndLastName
        explode: true
        in: query
        name: q
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: form
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AnyValue'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Business Data
      tags:
      - BusinessDataQuery
      x-accepts:
      - application/json
  /API/bdm/businessData/{businessDataType}/findByIds:
    get:
      description: |
        Finds business data specified by their identifiers.
      operationId: searchBusinessDataByIds
      parameters:
      - description: Business Data Type
        example: com.company.model.Employee
        explode: false
        in: path
        name: businessDataType
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: list of persistenceIds (comma separated)
        example: "1,3,56"
        explode: true
        in: query
        name: ids
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BusinessData'
                type: array
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds business data By Ids
      tags:
      - BDM
      x-accepts:
      - application/json
  /API/bdm/businessData/{businessDataType}/{persistenceId}:
    get:
      description: |
        Finds business data specified by its identifier.
      operationId: searchBusinessDataById
      parameters:
      - description: Business Data Type
        example: com.company.model.Employee
        explode: false
        in: path
        name: businessDataType
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Business data ID
        example: 1
        explode: false
        in: path
        name: persistenceId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessData'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds business data by Id
      tags:
      - BDM
      x-accepts:
      - application/json
  /API/bdm/businessData/{businessDataType}/{persistenceId}/{attributeName}:
    get:
      description: |
        Gets the business data attribute of business data according to its identifier and attribute name. Request url.
      operationId: searchBusinessDataAttributeById
      parameters:
      - description: Business Data Type
        example: com.company.model.Employee
        explode: false
        in: path
        name: businessDataType
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Business data ID
        example: 1
        explode: false
        in: path
        name: persistenceId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Business data attribute name
        example: company
        explode: false
        in: path
        name: attributeName
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                persistenceId_string: "1"
                persistenceVersion_string: "0"
                company: The Big Company
              schema:
                $ref: '#/components/schemas/BusinessData'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds business data attribute by id
      tags:
      - BDM
      x-accepts:
      - application/json
  /API/accessControl/bdm:
    delete:
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Delete the BDM access control
      operationId: deleteBDMAccessControl
      responses:
        "204":
          description: OK (no content).
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the BDM Access Control
      tags:
      - BDMAccessControl
      x-accepts:
      - application/json
    get:
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Get the BDM access control status.
      operationId: getBDMAccessControlStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BDMAccessControl'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: BDM access control status
      tags:
      - BDMAccessControl
      x-accepts:
      - application/json
  /portal/bdmAccessControlUpload:
    post:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Upload BDM Access Control

        Warning: as of 9.0.0, uploading a BDM Access Control using the portal is deprecated.
      operationId: uploadBDMAccessControl
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        "200":
          content:
            text/plain:
              example: tmp_accessControlFileToUpload.xml
              schema:
                maxLength: 250
                pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
                type: string
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Upload a BDM Access Control
      tags:
      - BDMAccessControl
      - Upload
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/plain
  /services/bdmAccessControl/install:
    post:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Import a BDM Access Control

        Warning: as of 9.0.0, importing a BDM Access Control using this service is deprecated.
      operationId: importBDMAccessControl
      requestBody:
        content:
          application/x-www-form-urlencoded:
            example:
              bdmAccessControlUpload: tmp_accessControlFileToUpload.xml
            schema:
              $ref: '#/components/schemas/importBDMAccessControl_request'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Import a BDM Access Control
      tags:
      - BDMAccessControl
      x-content-type: application/x-www-form-urlencoded
      x-accepts:
      - application/json
  /API/bpm/activity:
    get:
      description: |
        Finds Activities with pagination params and filters. Activities in states completed, cancelled, or aborted are not retrieved. The search returns an array of activities.

        - can order on `name`, `displayName`, `state`, `processDefinitionId`, `parentProcessInstanceId`, `parentActivityInstanceId` (order by parent activity id), `rootProcessInstanceId`, `lastUpdateDate`
        - can search on `name`, `displayName`, `state`, `processDefinitionId`, `parentProcessInstanceId`, `parentActivityInstanceId` (order by parent activity id), `rootProcessInstanceId`, `lastUpdateDate`
        - can filter on `name`, `state`, `processId`, `parentProcessInstanceId`, `rootProcessInstanceId`, `last_update_date`, `supervisor_id` (only in Enterprise editions)
      operationId: searchActivities
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Activities
      tags:
      - Activity
      x-accepts:
      - application/json
  /API/bpm/activity/{id}:
    get:
      description: |
        Returns the single Activity for the given ID
      operationId: getActivityById
      parameters:
      - description: ID of the Activity to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Activity by ID
      tags:
      - Activity
      x-accepts:
      - application/json
    put:
      description: |
        Update the Activity for the given ID
      operationId: updateActivityById
      parameters:
      - description: ID of the Activity to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUpdateRequest'
        description: Partial Activity description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Activity by ID
      tags:
      - Activity
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/archivedActivity:
    get:
      description: |
        Finds Archived  Activities with pagination params and filters. Activities in states completed, cancelled, or aborted are not retrieved. The search returns an array of activities.

        Can order on:
          - `name` : the name of this activity
          - `displayName` : the display name of this activity
          - `state` : the current state of the activity
          - `type` : the activity type
          - `isTerminal` : say whether or not the activity is in a terminal state
          - `processId` : the process this activity is associated to
          - `caseId` : the process instance initiator this activity is associated to
          - `reached_state_date` : the date when this activity arrived in this state

        Can filter on:
          - `supervisor_id`: retrieve the information the process manager associated to this id has access to (only in Enterprise editions)
          - f: same as the sort order fields
      operationId: searchArchivedActivities
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedActivity'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Archived Activities
      tags:
      - ArchivedActivity
      x-accepts:
      - application/json
  /API/bpm/archivedActivity/{id}:
    get:
      description: |
        Returns the single Archived Activity for the given ID
      operationId: getArchivedActivityById
      parameters:
      - description: ID of the Archived Activity to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedActivity'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Archived Activity by ID
      tags:
      - ArchivedActivity
      x-accepts:
      - application/json
  /API/bpm/humanTask:
    get:
      description: |
        Finds HumanTasks with pagination params and filters

        - can order on `name`, `priority`, `dueDate`, `state`, `processDefinitionId`, `processInstanceId`, `parentActivityInstanceId`, `assigneeId`, `parentContainerId`, `displayName`, `reachedStateDate`
        - can search on any field that can be used to order results
        - can filter on `assigned_id`, `user_id`, `show_assigned_to_others` (since 2022.2), `state`, `name`, `displayName`, `processDefinitionId`, `caseId`, `rootProcessInstanceId`, `parentProcessInstanceId`
      operationId: searchHumanTasks
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HumanTask'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds HumanTasks
      tags:
      - HumanTask
      x-accepts:
      - application/json
  /API/bpm/humanTask/{id}:
    get:
      description: |
        Returns the single HumanTask for the given ID
      operationId: getHumanTaskById
      parameters:
      - description: ID of the HumanTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HumanTask'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the HumanTask by ID
      tags:
      - HumanTask
      x-accepts:
      - application/json
    put:
      description: |
        Update the HumanTask for the given ID
      operationId: updateHumanTaskById
      parameters:
      - description: ID of the HumanTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HumanTaskUpdateRequest'
        description: Fields that can be updated are `assignedId` and `state`. Specify
          only those fields that you want to change.
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the HumanTask by ID
      tags:
      - HumanTask
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/manualTask:
    get:
      description: |
        Finds ManualTasks with pagination params and filters

        You can filter on:

        * `assigned_id={user_id}`: retrieve only the manual tasks assigned to the specified user. For example, retrieve the manual tasks assigned to user with id 1: `/API/bpm/manualTask?p=0&c=10&f=assigned_id%3d1`.
        * `state=skipped | ready | completed | failed` : retrieve only the manual tasks with the specified state. For example, retrieve the ready tasks: `/API/bpm/manualTask?p=0&c=10&f=state%3dready`.
        * `caseId={case_id}`: retrieve only the manual tasks created in the specified process instances. For example, retrieve the manual tasks for the case\_id 2: `/API/bpm/manualTask?p=0&c=10&f=caseId%3d2`.
        * `parentTaskId={parentTask_id}`: retrieve only the manual tasks for a specific parentTask. For example, retrieve the manual tasks for the parentTask\_id 40001: `/API/bpm/manualTask?p=0&c=10&f=parentTaskId%3d40001`.

        You can search on:

        * name: search all manual tasks with a name that starts with the search string. For example, search for all manual tasks that have a name that starts with MySubTask: `/API/bpm/manualTask?p=0&c=10&s=MySubTask`.
      operationId: searchManualTasks
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ManualTask'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ManualTasks
      tags:
      - ManualTask
      x-accepts:
      - application/json
    post:
      description: |
        Create the ManualTask.
        Use a POST method to create a new subtask. A subtask is attached to a parent task and it needs to be immediately assigned to a user.
      operationId: createManualTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualTaskCreateRequest'
        description: Partial ManualTask description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualTask'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the ManualTask
      tags:
      - ManualTask
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/manualTask/{id}:
    get:
      description: |
        Returns the single ManualTask for the given ID
      operationId: getManualTaskById
      parameters:
      - description: ID of the ManualTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualTask'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ManualTask by ID
      tags:
      - ManualTask
      x-accepts:
      - application/json
    put:
      description: |
        Update the ManualTask for the given ID.
        Use a PUT method to execute a subtask.
        Executing a subtask basically means changing its state to completed and providing an executedBy value.
      operationId: updateManualTaskById
      parameters:
      - description: ID of the ManualTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualTaskUpdateRequest'
        description: Partial ManualTask description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the ManualTask by ID
      tags:
      - ManualTask
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/task:
    get:
      description: |
        Finds Tasks with pagination params and filters

        - can order on `caseId`, `processId`, `state`, `type`, `supervisor_id`, `last_update_date`
        - can filter on `caseId`, `processId`, `state`, `type`, `supervisor_id`, `last_update_date`
      operationId: searchTasks
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Tasks
      tags:
      - Task
      x-accepts:
      - application/json
  /API/bpm/task/{id}:
    get:
      description: |
        Returns the single Task for the given ID
      operationId: getTaskById
      parameters:
      - description: ID of the Task to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Task by ID
      tags:
      - Task
      x-accepts:
      - application/json
    put:
      description: |
        Update the Task for the given ID
      operationId: updateTaskById
      parameters:
      - description: ID of the Task to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              state: completed
            schema:
              $ref: '#/components/schemas/UpdateTaskByIdRequest'
        description: "Task fields to update (forbidden fields are : `caseId`, `processId`,\
          \ `name`, `executedBy`, `type`, `id`, `reached_state_date`, `last_update_date`)"
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Task by ID
      tags:
      - Task
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/userTask:
    get:
      description: |
        Finds UserTasks with pagination params and filters

        - can order on `id`
        - can search on `displayName`
        - can filter on `displayName`
      operationId: searchUserTasks
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserTask'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds UserTasks
      tags:
      - UserTask
      x-accepts:
      - application/json
  /API/bpm/userTask/{id}:
    get:
      description: |
        Returns the single UserTask for the given ID
      operationId: getUserTaskById
      parameters:
      - description: ID of the UserTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTask'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the UserTask by ID
      tags:
      - UserTask
      x-accepts:
      - application/json
    put:
      description: |
        Update the UserTask for the given ID.

        Fields that can be updated are `assigned_id` and `state`. The only value that can be set for the state is `skipped`. You only need to specify the fields that are to be updated.
      operationId: updateUserTaskById
      parameters:
      - description: ID of the UserTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTaskUpdateRequest'
        description: Partial UserTask description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the UserTask by ID
      tags:
      - UserTask
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/userTask/{id}/contract:
    get:
      description: |
        Returns the Contract for the given UserTask ID
      operationId: getContractByUserTaskId
      parameters:
      - description: ID of the UserTask that has the Contract to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Contract by UserTask ID
      tags:
      - UserTask
      x-accepts:
      - application/json
  /API/bpm/userTask/{id}/execution:
    post:
      description: |
        Execute the UserTask. In order to execute a task, the task contract values have to be provided.
      operationId: executeUserTask
      parameters:
      - description: ID of the UserTask to execute
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: "if true, assign the task to the current user and execute the\
          \ task"
        explode: true
        in: query
        name: assign
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            example:
              ticket_comment: this is a comment
            schema:
              additionalProperties: true
              type: object
        description: A JSON object matching task contract. Execute a task providing
          correct contract values.
        required: true
      responses:
        "204":
          description: OK (no content).
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Execute the UserTask
      tags:
      - UserTask
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/userTask/{id}/context:
    get:
      description: |
        Returns the Context for the given UserTask ID
      operationId: getContextByUserTaskId
      parameters:
      - description: ID of the UserTask that has the Context to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                myBusinessData_ref:
                  name: myBusinessData
                  type: com.company.model.BusinessObject1
                  link: API/bdm/businessData/com.company.model.BusinessObject1/2
                  storageId: 2
                  storageId_string: "2"
                myDocument_ref:
                  id: 1
                  processInstanceId: 3
                  name: myDocument
                  author: 104
                  creationDate: 1434723950847
                  fileName: TestCommunity-1.0.bos
                  contentMimeType: null
                  contentStorageId: "1"
                  url: documentDownload?fileName=TestCommunity-1.0.bos&contentStorageId=1
                  description: ""
                  version: "1"
                  index: -1
                  contentFileName: TestCommunity-1.0.bos
              schema:
                additionalProperties: true
                type: object
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Context by UserTask ID
      tags:
      - UserTask
      x-accepts:
      - application/json
  /API/bpm/archivedHumanTask:
    get:
      description: |
        Finds ArchivedHumanTasks with pagination params and filters

        You can filter on:

        * `assigned_id={user_id}`: retrieve only the human tasks assigned to the specified ID. For example, retrieve the human tasks assigned to user with id 2: `/API/bpm/archivedHumanTask?p=0&c=10&f=assigned_id%3d2`
        * `state=`: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: `/API/bpm/archivedHumanTask?p=0&c=10&f=state=skipped`
        * `name=`: retrieve only the human tasks with the specified name. For example, retrieve the human tasks with the name "Analyse ProcessInstance": `/API/bpm/archivedHumanTask?p=0&c=10&f=name=Analyse ProcessInstance`
        * `displayName=`: retrieve only the archived user tasks with the specified displayName. For example, retrieve the human tasks with the displayName "Analyse ProcessInstance": `/API/bpm/archivedHumanTask?p=0&c=10&f=displayName=Analyse ProcessInstance`
      operationId: searchArchivedHumanTasks
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedHumanTask'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedHumanTasks
      tags:
      - ArchivedHumanTask
      x-accepts:
      - application/json
  /API/bpm/archivedHumanTask/{id}:
    get:
      description: |
        Returns the single ArchivedHumanTask for the given ID
      operationId: getArchivedHumanTaskById
      parameters:
      - description: ID of the ArchivedHumanTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedHumanTask'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ArchivedHumanTask by ID
      tags:
      - ArchivedHumanTask
      x-accepts:
      - application/json
  /API/bpm/archivedManualTask:
    get:
      description: |
        Finds ArchivedManualTasks with pagination params and filters

        You can filter on:

        * `assigned_id={user_id}`: retrieve only the human tasks assigned to the specified ID. For example, retrieve the human tasks assigned to user with id 2: `/API/bpm/archivedHumanTask?p=0&c=10&f=assigned_id%3d2`
        * `state=`: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: `/API/bpm/archivedHumanTask?p=0&c=10&f=state=skipped`
        * `name=`: retrieve only the human tasks with the specified name. For example, retrieve the human tasks with the name "Analyse ProcessInstance": `/API/bpm/archivedHumanTask?p=0&c=10&f=name=Analyse ProcessInstance`
        * `displayName=`: retrieve only the archived user tasks with the specified displayName. For example, retrieve the human tasks with the displayName "Analyse ProcessInstance": `/API/bpm/archivedHumanTask?p=0&c=10&f=displayName=Analyse ProcessInstance`
      operationId: searchArchivedManualTasks
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedManualTask'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedManualTasks
      tags:
      - ArchivedManualTask
      x-accepts:
      - application/json
  /API/bpm/archivedManualTask/{id}:
    get:
      description: |
        Returns the single ArchivedManualTask for the given ID
      operationId: getArchivedManualTaskById
      parameters:
      - description: ID of the ArchivedManualTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedManualTask'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ArchivedManualTask by ID
      tags:
      - ArchivedManualTask
      x-accepts:
      - application/json
  /API/bpm/archivedUserTask:
    get:
      description: |
        Finds ArchivedUserTasks with pagination params and filters.
        An ArchivedUserTask is an executable task that has been performed by a user or skipped and is archived.

        You can filter on:

        * `assigned_id={user_id}`: retrieve only the user tasks assigned to the specified ID. For example, retrieve the user tasks assigned to user with id 2: `/API/bpm/archivedUserTask?p=0&c=10&f=assigned_id%3d2`
        * `state=`: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: `/API/bpm/archivedUserTask?p=0&c=10&f=state=skipped`
        * `name=`: retrieve only the user tasks with the specified name. For example, retrieve the user tasks with the name "Analyse ProcessInstance": `/API/bpm/archivedUserTask?p=0&c=10&f=name=Analyse ProcessInstance`
        * `displayName=`: retrieve only the archived user tasks with the specified displayName. For example, retrieve the user tasks with the displayName "Analyse ProcessInstance": `/API/bpm/archivedUserTask?p=0&c=10&f=displayName=Analyse ProcessInstance`
      operationId: searchArchivedUserTasks
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedUserTask'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedUserTasks
      tags:
      - ArchivedUserTask
      x-accepts:
      - application/json
  /API/bpm/archivedUserTask/{id}:
    get:
      description: |
        Returns the single ArchivedUserTask for the given ID
      operationId: getArchivedUserTaskById
      parameters:
      - description: ID of the ArchivedUserTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedUserTask'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ArchivedUserTask by ID
      tags:
      - ArchivedUserTask
      x-accepts:
      - application/json
  /API/bpm/archivedTask:
    get:
      description: |
        Finds ArchivedTasks with pagination params and filters

        - Can order on `caseId`, `name`, `displayName`, `processId`, `state`, `type`, `archivedDate`, `reached_state_date`, `assigned_id`
        - Can filter on `caseId`, `name`, `displayName`, `processId`, `state`, `type`, `archivedDate`, `reached_state_date`, `assigned_id`, `isTerminal`
      operationId: searchArchivedTasks
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedTask'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedTasks
      tags:
      - ArchivedTask
      x-accepts:
      - application/json
  /API/bpm/archivedTask/{id}:
    get:
      description: |
        Returns the single ArchivedTask for the given ID
      operationId: getArchivedTaskById
      parameters:
      - description: ID of the ArchivedTask to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedTask'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ArchivedTask by ID
      tags:
      - ArchivedTask
      x-accepts:
      - application/json
  /API/bpm/activityVariable/{id}/{variableName}:
    get:
      description: |
        Returns the single ActivityVariable for the given ID
      operationId: getActivityVariableById
      parameters:
      - description: The identifier of the activity from which to retrieve the variable
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: The name of the variable to retrieve
        explode: false
        in: path
        name: variableName
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityVariable'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ActivityVariable by ID
      tags:
      - ActivityVariable
      x-accepts:
      - application/json
  /API/bpm/archivedActivityVariable/{id}/{variableName}:
    get:
      description: |
        Since 2022.1

        Returns the single ArchivedActivityVariable for the given activity ID and variable name
      operationId: getArchivedActivityInstanceVariable
      parameters:
      - description: The identifier of the activity from which to retrieve the variable
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: The name of the variable to retrieve
        explode: false
        in: path
        name: variableName
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedActivityVariable'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ArchivedActivityVariable by case ID and name
      tags:
      - ArchivedActivityVariable
      x-accepts:
      - application/json
  /API/bpm/caseVariable:
    get:
      description: |
        Finds ProcessInstance Variables with pagination params and filters
      operationId: searchProcessInstanceVariables
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessInstanceVariable'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProcessInstance Variables
      tags:
      - ProcessInstanceVariable
      x-accepts:
      - application/json
  /API/bpm/archivedCaseVariable:
    get:
      description: |
        Since 2022.1

        Finds ArchivedProcessInstance Variables with pagination params and filters
      operationId: getArchivedProcessInstanceVariables
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "Filter for the case id before it was archived (eg: case_id=10001\
          \ )"
        example: case_id%3d1001
        explode: true
        in: query
        name: f
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%\\_\\-\\.]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedProcessInstanceVariable'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedProcessInstance Variables
      tags:
      - ArchivedProcessInstanceVariable
      x-accepts:
      - application/json
  /API/bpm/caseVariable/{id}/{variableName}:
    get:
      description: |
        Returns the single Variable for the given ProcessInstance ID
      operationId: getVariableByProcessInstanceId
      parameters:
      - description: The identifier of the process instance from which to retrieve
          the variable
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: The name of the variable to retrieve
        explode: false
        in: path
        name: variableName
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceVariable'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Variable by ProcessInstance ID
      tags:
      - ProcessInstanceVariable
      x-accepts:
      - application/json
    put:
      description: |
        Update the variable for the given ProcessInstance ID.

        **Warning** : only following types are supported for javaTypeclassname: `java.lang.String`, `java.lang.Integer`, `java.lang.Double`, `java.lang.Long`, `java.lang.Boolean`, `java.util.Date`
      operationId: updateVariableByProcessInstanceId
      parameters:
      - description: The identifier of the process instance from which to retrieve
          the variable
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: The name of the variable to retrieve
        explode: false
        in: path
        name: variableName
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceVariableUpdateRequest'
        description: Partial ProcessInstance variables description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update a Variable by ProcessInstance ID
      tags:
      - ProcessInstanceVariable
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/archivedCaseVariable/{id}/{variableName}:
    get:
      description: |
        Since 2022.1

        Returns the single ArchivedProcessInstanceVariable for the given ProcessInstance ID and variable name
      operationId: getArchivedVariableByProcessInstance
      parameters:
      - description: The identifier of the process instance from which to retrieve
          the archived variable
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: The name of the archived variable to retrieve
        explode: false
        in: path
        name: variableName
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedProcessInstanceVariable'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds an archived Variable by ProcessInstance ID and variable name
      tags:
      - ArchivedProcessInstanceVariable
      x-accepts:
      - application/json
  /API/bpm/caseDocument:
    get:
      description: |
        Finds ProcessInstanceDocuments with pagination params and filters

        It is possible to filter on three parameters: `submittedBy`, `name` and `description`.

         * `submittedBy="id"`: search for documents that were submitted by the user with the specified identifier.
         * `name="string"`: search for documents with names that contain _string_.
           Depending on the setting for [word-based search](https://documentation.bonitasoft.com/bonita/latest/api/using-list-and-search-methods#word_based_search), the search returns documents with _string_ at the start of the name or the start of a word in the name.
         * `description="string"`: search for documents with descriptions that contain _string_.
           Depending on the setting for [word-based search](https://documentation.bonitasoft.com/bonita/latest/api/using-list-and-search-methods#word_based_search), the search returns documents with _string_ at the start of the description or the start of a word in the description.
      operationId: searchProcessInstanceDocuments
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessInstanceDocument'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProcessInstanceDocuments
      tags:
      - ProcessInstanceDocument
      x-accepts:
      - application/json
    post:
      description: |
        Create the ProcessInstanceDocument.

        Use a POST method to add a document to a process instances. You can upload a document from the local file system or by URL.
        Specify the process instance id and the document name in the payload. The document description is optional: if you do not specify a description, the description in the response is empty.
        The response contains a version, which is managed automatically. You cannot currently retrieve a specific version of a document, only the most recent version.
        To retrieve earlier versions of a ProcessInstanceDocument, use the archivedProcessInstanceDocument resource.
      operationId: createProcessInstanceDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceDocumentCreateRequest'
        description: Partial ProcessInstanceDocument description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceDocument'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the ProcessInstanceDocument
      tags:
      - ProcessInstanceDocument
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/caseDocument/{id}:
    delete:
      description: |
        Delete the single ProcessInstanceDocument for the given ID
      operationId: deleteProcessInstanceDocumentById
      parameters:
      - description: ID of the ProcessInstanceDocument to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ProcessInstanceDocument by ID
      tags:
      - ProcessInstanceDocument
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single ProcessInstanceDocument for the given ID.
        Use a GET method to get a document from a process instances. First you get the document information, then you download the content. To get the document information, specify the document id in the URL. The document id is created when you upload a document to a process instances. There is no payload.
      operationId: getProcessInstanceDocumentById
      parameters:
      - description: ID of the ProcessInstanceDocument to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceDocument'
          description: |
            "Success ".
            The response includes the "url" to use to download the content. Call the documentDownload servlet with this URL: /portal/documentDownload?fileName=doc.jpg&contentStorageId=4. Note: Since Bonita 7.10, document url fileName is now URL encoded. This will avoid errors when a document to be downloaded contains special characters in its name.
            In the previous versions, a workaround was necessary client-side using the javascript native function "encodeURI" to generate document download url. You can now remove this workaround.
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ProcessInstanceDocument by ID
      tags:
      - ProcessInstanceDocument
      x-accepts:
      - application/json
    put:
      description: |
        Update the ProcessInstanceDocument for the given ID

        You update a document in a process instance by uploading a new version of the document using a PUT method. You can upload a document version from the local file system or by URL. The document name will be used in all the process instances of the process, but the combination of process instance id and document name is unique.
        In the URL, you specify to supply the document id. This is included in the response when you first add a document to a process instances.
        The response to PUT methods is the same as for POST methods.
      operationId: updateProcessInstanceDocumentById
      parameters:
      - description: ID of the ProcessInstanceDocument to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceDocumentUpdateRequest'
        description: Partial ProcessInstanceDocument description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the ProcessInstanceDocument by ID
      tags:
      - ProcessInstanceDocument
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/archivedCaseDocument:
    get:
      description: |
        Finds ArchivedProcessInstanceDocuments with pagination params and filters

        You can filter on :

        * `sourceObjectId="id"`: search for documents by specifying the original document id.
          This is useful if you know the id of a ProcessInstanceDocument and you wish to retrieve all its previous versions..
        * `caseId="id"`: search for documents with the specified open process instance id.
        * `archivedCaseId="id"`: search for documents with the specified archived process instance id.
        * `submittedBy="id"`: search for documents that were submitted by the user with the specified identifier.
        * `name="string"`: search for documents with names that contain _string_.
          Depending on the setting for [word-based search](https://documentation.bonitasoft.com/bonita/latest/api/using-list-and-search-methods#word_based_search), the search returns documents with _string_ at the start of the name or the start of a word in the name.
        * `description="string"`: search for documents with descriptions that contain _string_.
          Depending on the setting for [word-based search](https://documentation.bonitasoft.com/bonita/latest/api/using-list-and-search-methods#word_based_search), the search returns documents with _string_ at the start of the description or the start of a word in the description.
      operationId: searchArchivedProcessInstanceDocuments
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedProcessInstanceDocument'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedProcessInstanceDocuments
      tags:
      - ArchivedProcessInstanceDocument
      x-accepts:
      - application/json
  /API/bpm/archivedCaseDocument/{id}:
    delete:
      description: |
        Delete the single ArchivedProcessInstanceDocument for the given ID
      operationId: deleteArchivedProcessInstanceDocumentById
      parameters:
      - description: ID of the ArchivedProcessInstanceDocument to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ArchivedProcessInstanceDocument by ID
      tags:
      - ArchivedProcessInstanceDocument
      x-accepts:
      - application/json
  /API/bpm/actor:
    get:
      description: |
        Finds Actors with pagination params and filters
      operationId: searchActors
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Actor'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Actors
      tags:
      - Actor
      x-accepts:
      - application/json
  /API/bpm/actor/{id}:
    get:
      description: |
        Returns the single Actor for the given ID
      operationId: getActorById
      parameters:
      - description: ID of the Actor to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actor'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Actor by ID
      tags:
      - Actor
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        Update the Actor for the given ID

        Warning: as of 9.0.0, updating an Actor using this API is deprecated.
      operationId: updateActorById
      parameters:
      - description: ID of the Actor to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorUpdateRequest'
        description: Fields that can be upated are `displayName` and `description`
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Actor by ID
      tags:
      - Actor
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/actorMember:
    get:
      description: |
        Finds ActorMembers with pagination params and filters

        There is a **mandatory** filter on:

        * `actor_id` For example, retrieve the actorMembers related to the specified actor_id. http://localhost:8080/bonita/API/bpm/actorMember?p=0&c=10&f=actor_id%3d1

        You can also filter also on:

        * `member_type` (user|role|group|roleAndGroup) retrieve only the actorMembers of type user. `/API/bpm/actorMember?p=0&c=10&f=actor_id%3d1&f=member_type%3duser`
        * `user_id`: retrieve only the actorMembers related to the specified user_id. `/API/bpm/actorMember?p=0&c=10&f=actor_id%3d1&f=user_id%3d101`
        * `role_id`: retrieve only the actorMembers related to the specified role_id. `/API/bpm/actorMember?p=0&c=10&f=actor_id%3d1&f=role_id%3d101`
        * `group_id`: retrieve only the actorMembers related to the specified group_id. `/API/bpm/actorMember?p=0&c=10&f=actor_id%3d1&f=group_id%3d101`
      operationId: searchActorMembers
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ActorMember'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ActorMembers
      tags:
      - ActorMember
      x-accepts:
      - application/json
  /API/bpm/actorMember/{id}:
    delete:
      description: |
        Delete the single ActorMember for the given ID
      operationId: deleteActorMemberById
      parameters:
      - description: ID of the ActorMember to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ActorMember by ID
      tags:
      - ActorMember
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single ActorMember for the given ID
      operationId: getActorMemberById
      parameters:
      - description: ID of the ActorMember to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorMember'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ActorMember by ID
      tags:
      - ActorMember
      x-accepts:
      - application/json
  /API/bpm/case:
    delete:
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue) ![edition](https://img.shields.io/badge/edition-community-brightgreen)

        Delete a list of ProcessInstances for the given IDs
      operationId: deleteProcessInstanceByIds
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: ProcessInstance id
                type: string
              type: array
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ProcessInstance by batch
      tags:
      - ProcessInstance
      x-content-type: application/json
      x-accepts:
      - application/json
    get:
      description: |
        Finds ProcessInstances with pagination params and filters

        You can filter on:

        * `processDefinitionId`: The process derfinition ID
        * `name`: the process name
        * `started_by`: the ID of the user who started the process
        * `team_manager_id`: allow to retrieve the process instances in which all users with this manager ID ar involved)
        * `supervisor_id`: allow the retrived the process instances of all processes the user with this ID is supervisor of) beware you cannot use team_manager_id and supervisor_id at the same time
      operationId: searchProcessInstances
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessInstance'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProcessInstances
      tags:
      - ProcessInstance
      x-accepts:
      - application/json
    post:
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue) ![edition](https://img.shields.io/badge/edition-community-brightgreen)

        Create the ProcessInstance
        This way of creating a process instance using this method will only work for processes in which no contract is defined. To instantiate a process with a contract, check the process instantiation resource documentation.
      operationId: createProcessInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceCreateRequest'
        description: |
          **Warning**: The attribute `variables` on the request payload is used to initialize the process variables (not BDM variables). If you want to initialize BDM variables at process instantiation, add a contract on the process and map BDM variables to the contract data. See Start a process using an instantiation contract for usage.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstance'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the ProcessInstance
      tags:
      - ProcessInstance
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/case/{id}:
    delete:
      description: |
        Delete the single ProcessInstance for the given ID
      operationId: deleteProcessInstanceById
      parameters:
      - description: ID of the ProcessInstance to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ProcessInstance by ID
      tags:
      - ProcessInstance
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single ProcessInstance for the given ID
      operationId: getProcessInstanceById
      parameters:
      - description: ID of the ProcessInstance to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Count of related resources
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          enum:
          - activeFlowNodes
          - failedFlowNodes
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstance'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ProcessInstance by ID
      tags:
      - ProcessInstance
      x-accepts:
      - application/json
  /API/bpm/case/{id}/context:
    get:
      description: |
        Returns the Context for the given ProcessInstance ID
      operationId: getContextByProcessInstanceId
      parameters:
      - description: ID of the ProcessInstance that has the Context to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                myBusinessData_ref:
                  name: myBusinessData
                  type: com.company.model.BusinessObject1
                  link: API/bdm/businessData/com.company.model.BusinessObject1/2
                  storageId: 2
                  storageId_string: "2"
                myDocument_ref:
                  id: 1
                  processInstanceId: 3
                  name: myDocument
                  author: 104
                  creationDate: 1434723950847
                  fileName: TestCommunity-1.0.bos
                  contentMimeType: null
                  contentStorageId: "1"
                  url: documentDownload?fileName=TestCommunity-1.0.bos&contentStorageId=1
                  description: ""
                  version: "1"
                  index: -1
                  contentFileName: TestCommunity-1.0.bos
              schema:
                additionalProperties: true
                type: object
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Context by ProcessInstance ID
      tags:
      - ProcessInstance
      x-accepts:
      - application/json
  /API/bpm/archivedCase:
    get:
      description: |
        Finds archived ProcessInstances (or ProcessInstance) with pagination params and filters

        You can order on `id`, `processDefinitionId`, `startedBy`, `startedBySubstitute`, `startDate`, `endDate`, `lastUpdate`, `archivedDate`, `sourceObjectId`

        You can filter on :

        * `sourceObjectId`: The original process instance ID before the process instance was archived
        * `processDefinitionId`: The process derfinition ID
        * `name`: the process name
        * `started_by`: the ID of the user who started the process
        * `team_manager_id`: allow to retrieve the process instances in which all users with this manager ID ar involved)
        * `supervisor_id`: allow the retrived the process instances of all processes the user with this ID is supervisor of) beware you cannot use team_manager_id and supervisor_id at the same time
      operationId: searchArchivedProcessInstances
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedProcessInstance'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedProcessInstances
      tags:
      - ArchivedProcessInstance
      x-accepts:
      - application/json
  /API/bpm/archivedCase/{id}:
    delete:
      description: |
        Delete the single ArchivedProcessInstance for the given ID
      operationId: deleteArchivedProcessInstanceById
      parameters:
      - description: ID of the ArchivedProcessInstance to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ArchivedProcessInstance by ID
      tags:
      - ArchivedProcessInstance
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single ArchivedProcessInstance for the given ID
      operationId: getArchivedProcessInstanceById
      parameters:
      - description: ID of the ArchivedProcessInstance to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedProcessInstance'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ArchivedProcessInstance by ID
      tags:
      - ArchivedProcessInstance
      x-accepts:
      - application/json
  /API/bpm/archivedCase/{id}/context:
    get:
      description: |
        Returns the Context for the given ArchivedProcessInstance ID
      operationId: getContextByArchivedProcessInstanceId
      parameters:
      - description: ID of the ArchivedProcessInstance that has the Context to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                myBusinessData_ref:
                  name: myBusinessData
                  type: com.company.model.BusinessObject1
                  link: API/bdm/businessData/com.company.model.BusinessObject1/2
                  storageId: 2
                  storageId_string: "2"
                myDocument_ref:
                  id: 1
                  processInstanceId: 3
                  name: myDocument
                  author: 104
                  creationDate: 1434723950847
                  fileName: TestCommunity-1.0.bos
                  contentMimeType: null
                  contentStorageId: "1"
                  url: documentDownload?fileName=TestCommunity-1.0.bos&contentStorageId=1
                  description: ""
                  version: "1"
                  index: -1
                  contentFileName: TestCommunity-1.0.bos
              schema:
                additionalProperties: true
                type: object
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Context by ArchivedProcessInstance ID
      tags:
      - ArchivedProcessInstance
      x-accepts:
      - application/json
  /API/bpm/caseInfo/{id}:
    get:
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue) since 2022.2

        Returns the single ProcessInstanceInfo for the given ID
      operationId: getProcessInstanceInfoById
      parameters:
      - description: ID of the ProcessInstanceInfo to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceInfo'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ProcessInstanceInfo by ID
      tags:
      - ProcessInstanceInfo
      x-accepts:
      - application/json
  /API/bpm/comment:
    get:
      description: |
        Finds ProcessInstanceComments with pagination params and filters

        - can order on `postDate`
        - can filter on `supervisor_id`,`user_id`,`processInstanceId` - You cannot use supervisor_id and user_id filter at the same time
      operationId: searchProcessInstanceComments
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessInstanceComment'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProcessInstanceComments
      tags:
      - ProcessInstanceComment
      x-accepts:
      - application/json
    post:
      description: |
        Create the ProcessInstanceComment
      operationId: createProcessInstanceComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceCommentCreateRequest'
        description: "The process instance (case) id and the comment content, in JSON"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceComment'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the ProcessInstanceComment
      tags:
      - ProcessInstanceComment
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/archivedComment:
    get:
      description: |
        Finds ArchivedProcessInstanceComments with pagination params and filters

        - can order on `id`
        - can search on `displayName`
        - can filter on `displayName`
      operationId: searchArchivedProcessInstanceComments
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedProcessInstanceComment'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedProcessInstanceComments
      tags:
      - ArchivedProcessInstanceComment
      x-accepts:
      - application/json
  /API/bpm/process:
    delete:
      description: |
        Delete Process for the given list of ID.

        **Warning: Beware! Data loss risk!**

        Deleting a process will automatically delete all its process instances (on-going and archived alike).
        Thus, the operation may take a long time, and fail if the transaction timeout is not large enough. This feature should only be used on non-production environments.

        **Please proceed at your own risk.**
      operationId: deleteProcessByIds
      requestBody:
        content:
          application/json:
            example:
            - "1"
            - "2"
            - "3"
            schema:
              items:
                type: string
              type: array
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the Process by IDs
      tags:
      - Process
      x-content-type: application/json
      x-accepts:
      - application/json
    get:
      description: |
        Finds Processes with pagination params and filters

        - can order (default is ASC) on `name`, `version`, `deploymentDate`, `deployedBy`, `activationState`, `configurationState`, `processId`, `displayName`, `lastUpdateDate`, `categoryId`, `label`
        - can search on `name`, `displayName` or `version`
        - can filter on `name`, `version`, `deploymentDate`, `deployedBy`, `activationState` with the value DISABLED or ENABLED, `configurationState` with the value UNRESOLVED, or RESOLVED, `processId`, `displayName`, `lastUpdateDate`, `categoryId`, `label`, `supervisor_id`
      operationId: searchProcesses
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessDefinition'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Processes
      tags:
      - Process
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        Create the Process.
        A process resource is created using the content of a .bar file that has previously been uploaded, using the [processUpload servlet](#operation/uploadProcess), to get the process archive path.

        Warning: as of 9.0.0, creating a process using this API is deprecated.
      operationId: createProcess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessCreateRequest'
        description: Partial Process description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDefinition'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the Process
      tags:
      - Process
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/process/{id}:
    delete:
      description: |
        Delete the single Process for the given ID.

        **Warning: Beware! Data loss risk!**

        Deleting a process will automatically delete all its process instances (on-going and archived alike).
        Thus, the operation may take a long time, and fail if the transaction timeout is not large enough. This feature should only be used on non-production environments.

        **Please proceed at your own risk.**
      operationId: deleteProcessById
      parameters:
      - description: ID of the Process to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the Process by ID
      tags:
      - Process
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single Process for the given ID
      operationId: getProcessById
      parameters:
      - description: ID of the Process to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDefinition'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Process by ID
      tags:
      - Process
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        Update the Process for the given ID

        Warning: as of 9.0.0, updating a process using this API is deprecated.
      operationId: updateProcessById
      parameters:
      - description: ID of the Process to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessUpdateRequest'
        description: Partial Process description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Process by ID
      tags:
      - Process
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/process/{id}/design:
    get:
      description: |
        Returns the single Process design for the given ID
      operationId: getProcessDesignById
      parameters:
      - description: ID of the Process to get the design from
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DesignProcessDefinition'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Process design by ID
      tags:
      - Process
      x-accepts:
      - application/json
  /API/bpm/process/{id}/contract:
    get:
      description: |
        Returns the process contract for the given ID
      operationId: getProcessContractById
      parameters:
      - description: ID of the Process to get the contract from
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Process contract by ID
      tags:
      - Process
      x-accepts:
      - application/json
  /API/bpm/process/{id}/instantiation:
    post:
      description: |
        Instanciate the process with the provided contract values.
      operationId: instanciateProcess
      parameters:
      - description: ID of the process to instanciate
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              ticket_account: CustomerA
              ticket_description: issue description
              ticket_subject: Issue 1
            schema:
              additionalProperties: true
              type: object
        description: A JSON object matching process contract.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstantiationResponse'
          description: Return the created process instance ID
        "400":
          content:
            application/json:
              example:
                message: "USERNAME=walter.bates | Contract is not valid: "
                exception: class org.bonitasoft.engine.bpm.contract.ContractViolationException
                explanations:
                - "Expected input [ticket_account] is missing"
                - "Expected input [ticket_description] is missing"
                - "Expected input [ticket_subject] is missing"
              schema:
                allOf:
                - $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Instanciate the process
      tags:
      - Process
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/processInfo/{id}:
    get:
      description: |
        Since 2022.2
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Returns the single ProcessInfo for the given ID
      operationId: getProcessInfoById
      parameters:
      - description: ID of the ProcessInfo to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInfo'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ProcessInfo by ID
      tags:
      - ProcessInfo
      x-accepts:
      - application/json
  /API/bpm/processConnector/{id}/{connectorImplId}/{connectorImplVersion}:
    put:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Update the ProcessConnector for the given ID

        Warning: as of 9.0.0, updating a Process Connector using this API is deprecated.
      operationId: updateProcessConnectorByProcessId
      parameters:
      - description: ID of the process to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: ID of the Process Connector implementation to update
        explode: false
        in: path
        name: connectorImplId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Version of the Process Connector implementation to update
        explode: false
        in: path
        name: connectorImplVersion
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProcessConnectorByProcessIdRequest'
        description: Partial ProcessConnector description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Process Connector by Process ID
      tags:
      - Process
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/diagram/{id}:
    get:
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Use the diagram resource to access the process diagram xml representation. This is necessary for drawing the diagram.
      operationId: getProcessDiagramById
      parameters:
      - description: ID of the process to get the diagram from
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                description: BPMN XML representation of the process definition
                type: string
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the diagram process by ID
      tags:
      - Diagram
      x-accepts:
      - application/json
      - application/xml
  /API/bpm/processParameter:
    get:
      description: |
        Finds ProcessParameters with pagination params and filters.
      operationId: searchProcessParameters
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessParameter'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProcessParameters
      tags:
      - ProcessParameter
      x-accepts:
      - application/json
  /API/bpm/processParameter/{id}/{name}:
    get:
      description: |
        Returns the single ProcessParameter for the given ID
      operationId: getProcessParameterById
      parameters:
      - description: ID of the process to get parameter from
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Name of the process parameter to return
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.\\s]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessParameter'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ProcessParameter by ID
      tags:
      - ProcessParameter
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Update the ProcessParameter for the given ID

        Warning: as of 9.0.0, importing a Process parameter using this API is deprecated.
      operationId: updateProcessParameterById
      parameters:
      - description: ID of the process to get parameter from
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Name of the process parameter to return
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessParameterUpdateRequest'
        description: "You can update only a process parameter value using the API.\
          \ If you specify values for other fields in the update request, they are\
          \ ignored."
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the ProcessParameter by ID
      tags:
      - ProcessParameter
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/processResolutionProblem:
    get:
      description: |
        Finds ProcessResolutionProblems with pagination params and filters to list the problems that need to be solved before a process can be used.

        **Filtering on the process definition ID is mandatory.**
      operationId: searchProcessResolutionProblems
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessResolutionProblem'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProcessResolutionProblems
      tags:
      - ProcessResolutionProblem
      x-accepts:
      - application/json
  /API/bpm/processSupervisor:
    delete:
      description: |
        Delete the ProcessSupervisor for the given compoound IDs

        You can delete a process supervisor by specifying its compound Id in the body of the request with the following format: `process_id/user_id/role_id/group_id`
      operationId: deleteProcessSupervisorById
      requestBody:
        content:
          application/json:
            example:
            - 8040901857674754544/11/-1/-1
            - 8040901857674754544/12/-1/-1
            schema:
              items:
                type: string
              type: array
        description: "The process definition id and either the user, role and/or group\
          \ id."
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ProcessSupervisor by ID
      tags:
      - ProcessSupervisor
      x-content-type: application/json
      x-accepts:
      - application/json
    get:
      description: |
        Finds ProcessSupervisors with pagination params and filters

        To filter, you need to specify the `process_id`, and then the `user_id`, `group_id` and `role_id` with one of them
        (two if you want to filter on group and role) set to `>0` and the other ones set to `-1`.
        E.g.: `f=process_id%3D8040901857674754544&f=user_id%3D>0&f=group_id%3D-1&f=role_id%3D-1`
      operationId: searchProcessSupervisors
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessSupervisor'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProcessSupervisors
      tags:
      - ProcessSupervisor
      x-accepts:
      - application/json
    post:
      description: |
        Create the ProcessSupervisor
      operationId: createProcessSupervisor
      requestBody:
        content:
          application/json:
            example:
              process_id: "5777042023671752656"
              user_id: "11"
            schema:
              $ref: '#/components/schemas/ProcessSupervisor'
        description: "The process definition id and either the user, role and/or group\
          \ id."
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessSupervisor'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the ProcessSupervisor
      tags:
      - ProcessSupervisor
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/processConnectorDependency:
    get:
      description: |
        Finds ProcessConnectorDependencies with pagination params and filters

        **Mandatory filters: `connector_process_id`, `connector_name`, `connector_version`**
      operationId: searchProcessConnectorDependencies
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessConnectorDependency'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProcessConnectorDependencies
      tags:
      - ProcessConnectorDependency
      x-accepts:
      - application/json
  /API/bpm/connectorFailure/{id}:
    get:
      description: |
        Returns the single ConnectorFailure for the given ID
      operationId: getConnectorFailureById
      parameters:
      - description: ID of the ConnectorFailure to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorFailure'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ConnectorFailure by ID
      tags:
      - ConnectorFailure
      x-accepts:
      - application/json
  /API/bpm/connectorInstance:
    get:
      description: |
        Finds ConnectorInstances with pagination params and filters.
        Retrieve a list of connector instances attached to a process or a flow node.
      operationId: searchConnectorInstances
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ConnectorInstance'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ConnectorInstances
      tags:
      - ConnectorInstance
      x-accepts:
      - application/json
  /API/bpm/archivedConnectorInstance:
    get:
      description: |
        Finds ArchivedConnectorInstances with pagination params and filters
      operationId: searchArchivedConnectorInstances
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedConnectorInstance'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedConnectorInstances
      tags:
      - ArchivedConnectorInstance
      x-accepts:
      - application/json
  /API/bpm/flowNode:
    get:
      description: |
        Finds FlowNodes with pagination params and filters

        - can order on `name`, `displayName`, `state`, `processDefinitionId`, `parentProcessInstanceId`, `parentActivityInstanceId` (if the retrieved flow nodes are activities, order by parent activity id), `rootProcessInstanceId`, `lastUpdateDate`
        - can search on any field that can be used to order results
        - can filter on `name`, `state`, `processId`, `parentProcessInstanceId`, `rootProcessInstanceId`, `last_update_date`
      operationId: searchFlowNodes
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FlowNode'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds FlowNodes
      tags:
      - FlowNode
      x-accepts:
      - application/json
  /API/bpm/flowNode/{id}:
    get:
      description: |
        Returns the single FlowNode for the given ID
      operationId: getFlowNodeById
      parameters:
      - description: ID of the FlowNode to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowNode'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the FlowNode by ID
      tags:
      - FlowNode
      x-accepts:
      - application/json
    put:
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Replay the flow node for the given ID.
      operationId: updateFlowNodeById
      parameters:
      - description: ID of the FlowNode to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlowNodeUpdateRequest'
        description: Replay the flow node.
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the FlowNode by ID
      tags:
      - FlowNode
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/archivedFlowNode:
    get:
      description: |
        Finds ArchivedFlowNodes with pagination params and filters

        - can order on `name`, `displayName`, `state`, `type`, `isTerminal`, `processId`, `caseId`, `archivedDate`
        - can search on any field that can be used to order results
        - can filter on `name`, `displayName`, `state`, `stateId`, `kind`, `terminal`, `processDefinitionId`, `parentProcessInstanceId`, `rootProcessInstanceId`, `parentActivityInstanceId`, `archivedDate`, `reachedStateDate`, `sourceObjectId`
      operationId: searchArchivedFlowNodes
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedFlowNode'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ArchivedFlowNodes
      tags:
      - ArchivedFlowNode
      x-accepts:
      - application/json
  /API/bpm/archivedFlowNode/{id}:
    get:
      description: |
        Returns the single ArchivedFlowNode for the given ID
      operationId: getArchivedFlowNodeById
      parameters:
      - description: ID of the ArchivedFlowNode to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedFlowNode'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ArchivedFlowNode by ID
      tags:
      - ArchivedFlowNode
      x-accepts:
      - application/json
  /API/bpm/timerEventTrigger:
    get:
      description: |
        Finds TimerEventTriggers with pagination params and filters

        - can order on `id`
        - can search on `displayName`
        - can filter on `displayName`
      operationId: searchTimerEventTriggers
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: the process instance id
        explode: true
        in: query
        name: caseId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TimerEventTrigger'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds TimerEventTriggers
      tags:
      - TimerEventTrigger
      x-accepts:
      - application/json
  /API/bpm/timerEventTrigger/{id}:
    get:
      description: |
        Returns the single TimerEventTrigger for the given ID
      operationId: getTimerEventTriggerById
      parameters:
      - description: ID of the TimerEventTrigger to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimerEventTrigger'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the TimerEventTrigger by ID
      tags:
      - TimerEventTrigger
      x-accepts:
      - application/json
    put:
      description: |
        Update the TimerEventTrigger for the given ID
      operationId: updateTimerEventTriggerById
      parameters:
      - description: ID of the TimerEventTrigger to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimerEventTriggerUpdateRequest'
        description: a long value with attribute name "executionDate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimerEventTriggerUpdateResponse'
          description: "The actual long value corresponding to the next execution\
            \ date of the timer event trigger, as a long value"
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the TimerEventTrigger by ID
      tags:
      - TimerEventTrigger
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/message:
    post:
      description: |
        Use this resource to send BPM message events. Message events are caught by processes using `catch message event` flow nodes (Start, intermediate, boundary or receive tasks).
      operationId: createMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        description: A Message event
        required: true
      responses:
        "204":
          description: OK (no content).
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Send BPM message events
      tags:
      - Message
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/bpm/signal:
    post:
      description: |
        Since 2022.1

        Use this resource to broadcast BPM signal events. Signal events are caught by processes using `catch signal event` flow nodes (Start, intermediate or boundary).
      operationId: broadcastSignal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signal'
        description: A Signal event
        required: true
      responses:
        "204":
          description: OK (no content).
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Broadcast BPM signal events
      tags:
      - Signal
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/customuserinfo/definition:
    get:
      description: |
        Finds CustomUserDefinitions. There are no filters, and no search terms. All the definitions are returned.
      operationId: searchCustomUserDefinitions
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomUserDefinition'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds CustomUserDefinitions
      tags:
      - CustomUserDefinition
      x-accepts:
      - application/json
    post:
      description: |
        Create the CustomUserDefinition
      operationId: createCustomUserDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserDefinitionCreateRequest'
        description: Partial CustomUserDefinition description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDefinition'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the CustomUserDefinition
      tags:
      - CustomUserDefinition
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/customuserinfo/definition/{id}:
    delete:
      description: |
        Delete the single CustomUserDefinition for the given ID
      operationId: deleteCustomUserDefinitionById
      parameters:
      - description: ID of the CustomUserDefinition to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the CustomUserDefinition by ID
      tags:
      - CustomUserDefinition
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single CustomUserDefinition for the given ID
      operationId: getCustomUserDefinitionById
      parameters:
      - description: ID of the CustomUserDefinition to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDefinition'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the CustomUserDefinition by ID
      tags:
      - CustomUserDefinition
      x-accepts:
      - application/json
  /API/customuserinfo/value:
    get:
      description: |
        Finds CustomUserValues with pagination params and filters

        You can filter on `userId`, `value`, `definitionId`
      operationId: searchCustomUserValues
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomUserValue'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds CustomUserValues
      tags:
      - CustomUserValue
      x-accepts:
      - application/json
  /API/customuserinfo/value/{userId}/{definitionId}:
    put:
      description: |
        Update the CustomUserValue for the given ID
      operationId: updateCustomUserValueById
      parameters:
      - description: User ID
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: definition ID
        explode: false
        in: path
        name: definitionId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserValueUpdateRequest'
        description: Custom user defition Value
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the CustomUserValue by ID
      tags:
      - CustomUserValue
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/customuserinfo/user:
    get:
      description: |
        Finds CustomUsers with pagination params and filters

        **The filter `userId` is mandatory**
      operationId: searchCustomUsers
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomUser'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds CustomUsers
      tags:
      - CustomUser
      x-accepts:
      - application/json
  /API/form/mapping:
    get:
      description: |
        Finds FormMappings with pagination params and filters

        - can filter on `processDefinitionId`,`type`
      operationId: searchFormMappings
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FormMapping'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds FormMappings
      tags:
      - FormMapping
      x-accepts:
      - application/json
  /API/form/mapping/{id}:
    put:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Update the FormMapping for the given ID

        Warning: as of 9.0.0, updating a Form Mapping using this API is deprecated.
      operationId: updateFormMappingById
      parameters:
      - description: ID of the FormMapping to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormMappingUpdateRequest'
        description: "Representation of the form mapping attribute to update - {'pageId':\
          \ (long)} or {'url': (string)} or {} to set the mapping type to NONE"
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the FormMapping by ID
      tags:
      - FormMapping
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/professionalcontactdata:
    get:
      description: |
        Finds ProfessionalContactData with pagination params and filters

        - can order on `id`
        - can search on `displayName`
        - can filter on `displayName`
      operationId: searchProfessionalContactDatas
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProfessionalContactData'
                type: array
          description: Success
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProfessionalContactData
      tags:
      - ProfessionalContactData
      x-accepts:
      - application/json
    post:
      description: |
        Create the ProfessionalContactData
      operationId: createProfessionalContactData
      requestBody:
        content:
          application/json:
            example:
              id: "4"
              fax_number: 484-302-0766
              building: "70"
              phone_number: 484-302-5766
              zipcode: "19108"
              state: PA
              city: Philadelphia
              country: United States
              address: Renwick Drive
              email: walter.bates@acme.com
            schema:
              $ref: '#/components/schemas/ProfessionalContactData'
        description: Partial ProfessionalContactData description including the user
          ID
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfessionalContactData'
          description: Success
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          description: Contact information for this user already exists
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the ProfessionalContactData
      tags:
      - ProfessionalContactData
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/professionalcontactdata/{userId}:
    get:
      description: |
        Returns the single ProfessionalContactData for the given ID
      operationId: getProfessionalContactDataById
      parameters:
      - description: User ID of the ProfessionalContactData to return
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfessionalContactData'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ProfessionalContactData by ID
      tags:
      - ProfessionalContactData
      x-accepts:
      - application/json
    put:
      description: |
        Update the ProfessionalContactData for the given ID
      operationId: updateProfessionalContactDataById
      parameters:
      - description: User ID of the ProfessionalContactData to update
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              id: "4"
              fax_number: 484-302-0766
              building: "70"
              phone_number: 484-302-5766
              zipcode: "19108"
              state: PA
              city: Philadelphia
              country: United States
              address: Renwick Drive
              email: walter.bates@acme.com
            schema:
              $ref: '#/components/schemas/ProfessionalContactData'
        description: Partial ProfessionalContactData description including the user
          ID
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the ProfessionalContactData by ID
      tags:
      - ProfessionalContactData
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/personalcontactdata/{userId}:
    get:
      description: |
        Returns the single PersonalContactData for the given ID
      operationId: getPersonalContactDataById
      parameters:
      - description: User ID of the PersonalContactData to return
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfessionalContactData'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the PersonalContactData by ID
      tags:
      - ProfessionalContactData
      x-accepts:
      - application/json
    put:
      description: |
        Update the PersonalContactData for the given ID
      operationId: updatePersonalContactDataById
      parameters:
      - description: User ID of the PersonalContactData to update
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              id: "4"
              fax_number: 484-302-0766
              building: "70"
              phone_number: 484-302-5766
              zipcode: "19108"
              state: PA
              city: Philadelphia
              country: United States
              address: Renwick Drive
              email: walter.bates@acme.com
            schema:
              $ref: '#/components/schemas/ProfessionalContactData'
        description: Partial PersonalContactData description including the user ID
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the PersonalContactData by ID
      tags:
      - ProfessionalContactData
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/group:
    get:
      description: |
        Finds Groups with pagination params and filters.

        - can order on `id`,`name`,`displayName`
        - can filter on `name`,`displayName`,`parent_path`
      operationId: searchGroups
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Groups
      tags:
      - Group
      x-accepts:
      - application/json
    post:
      description: |
        Create the Group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
        description: Partial Group description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the Group
      tags:
      - Group
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/group/{id}:
    delete:
      description: |
        Delete the single Group for the given ID
      operationId: deleteGroupById
      parameters:
      - description: ID of the Group to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the Group by ID
      tags:
      - Group
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single Group for the given ID
      operationId: getGroupById
      parameters:
      - description: ID of the Group to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Group by ID
      tags:
      - Group
      x-accepts:
      - application/json
    put:
      description: |
        Update the Group for the given ID
      operationId: updateGroupById
      parameters:
      - description: ID of the Group to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateRequest'
        description: Partial Group description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Group by ID
      tags:
      - Group
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/membership:
    get:
      description: |
        Finds Memberships with pagination params and filters

        **Filter `user_id` is mandatory**

        You can order with the values: `ROLE_NAME_ASC`,`ROLE_NAME_DESC`, `GROUP_NAME_ASC`,`GROUP_NAME_DESC`, `ASSIGNED_DATE_ASC`, `ASSIGNED_DATE_DESC`
      operationId: searchMemberships
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Membership'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Memberships
      tags:
      - Membership
      x-accepts:
      - application/json
    post:
      description: |
        Create the Membership
      operationId: createMembership
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipCreateRequest'
        description: Partial Membership description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the Membership
      tags:
      - Membership
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/membership/{userId}/{groupId}/{roleId}:
    delete:
      description: |
        Delete a membership of a user using the group id and role id.
      operationId: deleteMembershipById
      parameters:
      - description: User ID of the Membership to delete
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Group ID of the Membership to delete
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      - description: Role ID of the Membership to delete
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the Membership by ID
      tags:
      - Membership
      x-accepts:
      - application/json
  /API/identity/role:
    get:
      description: |
        Finds Roles with pagination params and filters

        - can order on `id`, `name` and `displayName`
        - can filter on `name` and `displayName`
      operationId: searchRoles
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Roles
      tags:
      - Role
      x-accepts:
      - application/json
    post:
      description: |
        Create the Role
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateRequest'
        description: Partial Role description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the Role
      tags:
      - Role
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/role/{id}:
    delete:
      description: |
        Delete the single Role for the given ID
      operationId: deleteRoleById
      parameters:
      - description: ID of the Role to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the Role by ID
      tags:
      - Role
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single Role for the given ID
      operationId: getRoleById
      parameters:
      - description: ID of the Role to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Role by ID
      tags:
      - Role
      x-accepts:
      - application/json
    put:
      description: |
        Update the Role for the given ID
      operationId: updateRoleById
      parameters:
      - description: ID of the Role to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdateRequest'
        description: Partial Role description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Role by ID
      tags:
      - Role
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/user:
    get:
      description: |
        Finds Users with pagination params and filters

        - can order on `id`
        - can search on `displayName`
        - can filter on `displayName`
      operationId: searchUsers
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Users
      tags:
      - User
      x-accepts:
      - application/json
    post:
      description: |
        Create the User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        description: Partial User description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the User
      tags:
      - User
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/identity/user/{id}:
    delete:
      description: |
        Delete the single User for the given ID.

        **Use this method with caution**: some artifacts like applications, process instances or users may present display problems in the Bonita Portal if the referenced user was deleted.
        Note that you can disable a user instead of deleting it. To do so, use the UPDATE method and set the attribute 'enabled' to false
      operationId: deleteUserById
      parameters:
      - description: ID of the User to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the User by ID
      tags:
      - User
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single User for the given ID
      operationId: getUserById
      parameters:
      - description: ID of the User to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the User by ID
      tags:
      - User
      x-accepts:
      - application/json
    put:
      description: |
        Update the User for the given ID
      operationId: updateUserById
      parameters:
      - description: ID of the User to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        description: Partial User description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the User by ID
      tags:
      - User
      x-content-type: application/json
      x-accepts:
      - application/json
  /platformloginservice:
    post:
      description: |
        The username and password are in `bonita-platform-community-custom.properties` file.
      operationId: platformLogin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            example:
              username: install
              password: install
              redirect: "false"
            schema:
              $ref: '#/components/schemas/platformLogin_request'
      responses:
        "200":
          description: Login success
          headers:
            Set-Cookie:
              description: Session cookie
              explode: false
              schema:
                example: JSESSIONID=C5385BFEE2969D9E46F0160C1952B0F1; Path=/bonita;
                  HttpOnly; SameSite=Lax
                pattern: "([^;]+);?"
                type: string
              style: simple
            X-Bonita-API-Token:
              description: X-Bonita-API-Token - CSRF token (also present in the cookie
                response)
              example: ed27cbeb-9953-4d77-b5a2-1f62a6c2e0bb
              explode: false
              schema:
                maxLength: 250
                pattern: "^[A-Za-z0-9\\-]{0,250}$"
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Platform Login
      tags:
      - Platform
      - PlatformAuthentication
      x-content-type: application/x-www-form-urlencoded
      x-accepts:
      - application/json
  /platformlogoutservice:
    post:
      description: ""
      operationId: platformLogout
      responses:
        "200":
          description: logout success
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Platform Logout
      tags:
      - Platform
      - PlatformAuthentication
      x-accepts:
      - application/json
  /API/platform/platform/unusedid:
    get:
      description: |
        Returns the current Platform
      operationId: getPlatformById
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Platform by ID
      tags:
      - Platform
      x-accepts:
      - application/json
    put:
      description: |
        Start or stop the current node, that is, start or stop all services of the current JVM.
      operationId: updatePlatformById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformUpdateRequest'
        description: Start or stop all services of the current JVM.
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Platform by ID
      tags:
      - Platform
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/platform/tenant:
    get:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Finds Tenants with pagination params and filters

        - can order on `id`
        - can search on `displayName`
        - can filter on `displayName`

        Warning: Since Bonita 7.12, multi-tenancy is deprecated
      operationId: searchTenants
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tenant'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Tenants
      tags:
      - Tenant
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Create the Tenant.

        Warning: Since Bonita 7.12, multi-tenancy is deprecated. Creating new tenants is strongly discouraged.
      operationId: createTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateRequest'
        description: Partial Tenant description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the Tenant
      tags:
      - Tenant
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/platform/tenant/{id}:
    delete:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Delete the single Tenant for the given ID
      operationId: deleteTenantById
      parameters:
      - description: ID of the Tenant to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the Tenant by ID
      tags:
      - Tenant
      x-accepts:
      - application/json
    get:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Returns the single Tenant for the given ID
        Warning: Since Bonita 7.12, multi-tenancy is deprecated
      operationId: getTenantById
      parameters:
      - description: ID of the Tenant to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Tenant by ID
      tags:
      - Tenant
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue) ![edition](https://img.shields.io/badge/edition-community-brightgreen)

        Update a Tenant

        Warning: Since Bonita 7.12, multi-tenancy is deprecated
      operationId: updateTenantById
      parameters:
      - description: "ID of the Tenant to update. In Subscription edition, it is mandatory;\
          \ not in Community edition, as there is only one tenant"
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUpdateRequest'
        description: Partial Tenant description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Tenant by ID
      tags:
      - Tenant
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/platform/license:
    get:
      description: |
        Returns the current platform License.
        This requires a platform session. Log in using the platform login service.
      operationId: getPlatformLicense
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformLicense'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Get the platform License
      tags:
      - License
      x-accepts:
      - application/json
  /portal/processUpload:
    post:
      deprecated: true
      description: |
        Upload a bar file

        Warning: as of 9.0.0, uploading a bar file using the portal is deprecated.
      operationId: uploadProcess
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: tmp_11199343585454336281.bar
                maxLength: 250
                pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
                type: string
          description: the temporary file name once uploaded on the server
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Upload a bar file
      tags:
      - Process
      - Upload
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/plain
  /portal/pageUpload:
    post:
      deprecated: true
      description: |
        Upload Page

        Warning: as of 9.0.0, uploading a page using the portal is deprecated.
      operationId: uploadPage
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        "200":
          content:
            text/plain:
              schema:
                maxLength: 250
                pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
                type: string
          description: "Success: the temp file name as present on the server"
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Upload a Page
      tags:
      - Page
      - Upload
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/plain
  /portal/fileUpload:
    post:
      description: |
        Upload file.

        **NOTE:** If this file is a BDM zip, to do this, your tenant services need to be paused.
        In Enterprise editions, if you have an access control file installed on your tenant, you need to delete it before installing or updating your BDM.
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        "200":
          content:
            text/plain:
              schema:
                maxLength: 250
                pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
                type: string
          description: "Success: the temp file name as present on the server"
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Upload a file
      tags:
      - Upload
      - BDM
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/plain
  /API/portal/page:
    get:
      description: |
        Finds Pages with pagination params and filters

        - can search on `displayName`,`description`
        - can filter on `createdBy`,`contentType`
      operationId: searchPages
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Page'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Pages
      tags:
      - Page
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        Upload the page content using the `portal/pageUpload`. This returns a temporary file name that can be used as input for this operation.

        Warning: as of 9.0.0, creating a page using this API is deprecated.
      operationId: createPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageCreateRequest'
        description: Zip name as named in the temp folder after upload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the Page
      tags:
      - Page
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/portal/page/{id}:
    delete:
      description: |
        Delete the single Page for the given ID
      operationId: deletePageById
      parameters:
      - description: ID of the Page to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the Page by ID
      tags:
      - Page
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single Page for the given ID
      operationId: getPageById
      parameters:
      - description: ID of the Page to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Page by ID
      tags:
      - Page
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        Use the PUT method to update an existing custom page. To update a custom page, upload the new page content using the pageUpload servlet, which returns a temporary file name, and then call this API with the temporary file name.

        Warning: as of 9.0.0, updating a page using this API is deprecated.
      operationId: updatePageById
      parameters:
      - description: ID of the Page to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageUpdateRequest'
        description: Partial Page description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Page by ID
      tags:
      - Page
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/portal/profile:
    get:
      description: |
        Finds Profiles with pagination params and filters

        - can search on `name`
        - can filter on `name`,`hasNavigation`
        - can order on `name`
      operationId: searchProfiles
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      - description: can order on attributes
        example: myProp%20ASC
        explode: true
        in: query
        name: o
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Profile'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds Profiles
      tags:
      - Profile
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Create the Profile

        Warning: as of 9.0.0, creating profiles using this API is deprecated.
      operationId: createProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileCreateRequest'
        description: Partial Profile description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the Profile
      tags:
      - Profile
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/portal/profile/{id}:
    delete:
      description: |
        Delete the single Profile for the given ID
      operationId: deleteProfileById
      parameters:
      - description: ID of the Profile to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the Profile by ID
      tags:
      - Profile
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single Profile for the given ID
      operationId: getProfileById
      parameters:
      - description: ID of the Profile to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the Profile by ID
      tags:
      - Profile
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Update the Profile for the given ID

        Warning: as of 9.0.0, updating a profile using this API is deprecated.
      operationId: updateProfileById
      parameters:
      - description: ID of the Profile to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
        description: Partial Profile description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the Profile by ID
      tags:
      - Profile
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/portal/profileEntry:
    get:
      deprecated: true
      description: |
        Finds ProfileEntries with pagination params and filters

        - can search on `name`
        - can filter on `page`,`name` and `parent_id`

        Warning: Since Bonita 7.13, ProfileEntry is deprecated
      operationId: searchProfileEntries
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      - description: can search on attributes
        explode: true
        in: query
        name: s
        required: false
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProfileEntry'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProfileEntries
      tags:
      - ProfileEntry
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        Create the ProfileEntry
        Warning: Since Bonita 7.13, ProfileEntry is deprecated
      operationId: createProfileEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileEntryCreateRequest'
        description: Partial ProfileEntry description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileEntry'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the ProfileEntry
      tags:
      - ProfileEntry
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/portal/profileEntry/{id}:
    delete:
      deprecated: true
      description: |
        Delete the single ProfileEntry for the given ID
      operationId: deleteProfileEntryById
      parameters:
      - description: ID of the ProfileEntry to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ProfileEntry by ID
      tags:
      - ProfileEntry
      x-accepts:
      - application/json
    get:
      deprecated: true
      description: |
        Returns the single ProfileEntry for the given ID
        Warning: Since Bonita 7.13, ProfileEntry is deprecated
      operationId: getProfileEntryById
      parameters:
      - description: ID of the ProfileEntry to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileEntry'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ProfileEntry by ID
      tags:
      - ProfileEntry
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        Update the ProfileEntry for the given ID
        Warning: Since Bonita 7.13, ProfileEntry is deprecated
      operationId: updateProfileEntryById
      parameters:
      - description: ID of the ProfileEntry to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileEntryUpdateRequest'
        description: Partial ProfileEntry description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the ProfileEntry by ID
      tags:
      - ProfileEntry
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/portal/profileMember:
    get:
      description: |
        Finds ProfileMembers with pagination params and filters

        **Filter `member_type` is mandatory**

        You can filter on `profile_id`, `user_id`, `role_id` and `group_id`
      operationId: searchProfileMembers
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProfileMember'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds ProfileMembers
      tags:
      - ProfileMember
      x-accepts:
      - application/json
    post:
      description: |
        Create the ProfileMember
      operationId: createProfileMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileMemberCreateRequest'
        description: Partial ProfileMember description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMember'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the ProfileMember
      tags:
      - ProfileMember
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/portal/profileMember/{id}:
    delete:
      description: |
        Delete the single ProfileMember for the given ID
      operationId: deleteProfileMemberById
      parameters:
      - description: ID of the ProfileMember to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Delete the ProfileMember by ID
      tags:
      - ProfileMember
      x-accepts:
      - application/json
    get:
      description: |
        Returns the single ProfileMember for the given ID
      operationId: getProfileMemberById
      parameters:
      - description: ID of the ProfileMember to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMember'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds the ProfileMember by ID
      tags:
      - ProfileMember
      x-accepts:
      - application/json
  /API/portal/theme:
    post:
      deprecated: true
      description: |
        Create the Theme
        Warning: Since Bonita 7.13, theme management is deprecated
      operationId: createTheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeCreateRequest'
        description: Partial Theme description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Create the Theme
      tags:
      - Theme
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/portal/theme/unusedId:
    put:
      deprecated: true
      description: |
        Restore the default theme
        Warning: Since Bonita 7.13, theme management is deprecated
      operationId: restoreTheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeRestoreRequest'
        description: Partial Theme description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Restore default Theme
      tags:
      - Theme
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/system/i18nlocale:
    get:
      description: |
        List the available I18nlocales with pagination params and filters
      operationId: searchI18nlocales
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/I18nlocale'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds I18nlocales
      tags:
      - I18nlocale
      x-accepts:
      - application/json
  /API/system/i18ntranslation:
    get:
      description: |
        List the available I18ntranslations with pagination params and filters
        Returns all translations of the product. If a locale is specified in the filter, that translation for that locale are returned.
        If no locale is specified, the translations in English are returned.

        You can filter on `locale`
      operationId: searchI18ntranslations
      parameters:
      - description: index of the page to display
        example: "0"
        explode: true
        in: query
        name: p
        required: true
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: maximum number of elements to retrieve
        example: "10"
        explode: true
        in: query
        name: c
        required: true
        schema:
          default: 20
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: "can filter on attributes with the format f={filter\\_name}={filter\\\
          _value} with the name/value pair as url encoded string."
        example: abc%3d123
        explode: true
        in: query
        name: f
        required: false
        schema:
          items:
            maxLength: 250
            pattern: "^[A-Za-z0-9%]{0,250}$"
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/I18ntranslation'
                type: array
          description: 'Success '
          headers:
            Content-Range:
              description: The total number of matching items
              explode: false
              schema:
                format: int64
                type: integer
              style: simple
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Finds I18ntranslations
      tags:
      - I18ntranslation
      x-accepts:
      - application/json
  /API/system/session/unusedId:
    get:
      description: |
        Returns session information for the current user
      operationId: getSession
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Get the current user session
      tags:
      - Session
      x-codeSamples:
      - lang: Shell
        label: Curl
        source: |
          curl -b saved_cookies.txt -X GET --url 'http://localhost:8080/bonita/API/system/session/unusedId'
      x-accepts:
      - application/json
  /API/system/tenant/{id}:
    get:
      deprecated: true
      description: |
        Pause and resume tenant services in order to do maintenance on a tenant.

        Warning: since Bonita 9.0.0, /API/system/tenant API resource is deprecated. Use /API/system/maintenance instead to retrieve the maintenance state.
      operationId: getSystemTenant
      parameters:
      - description: ID of the tenant
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemTenant'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Get the current Tenant
      tags:
      - SystemTenant
      x-accepts:
      - application/json
    put:
      deprecated: true
      description: |
        Pause or resume the current tenant.

        Warning: since Bonita 9.0.0, /API/system/tenant API resource is deprecated. Use /API/system/maintenance instead to enable the maintenance mode (same behavior as pausing the tenant).
      operationId: updateSystemTenant
      parameters:
      - description: ID of the tenant
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantPauseRequest'
        description: Partial SystemTenant description
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the current Tenant
      tags:
      - SystemTenant
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/system/maintenance:
    get:
      description: |
        Returns maintenance details of the platform
      operationId: getMaintenanceDetails
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceDetails'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Get the maintenance details
      tags:
      - Maintenance
      x-codeSamples:
      - lang: Shell
        label: Curl
        source: |
          curl -b saved_cookies.txt -X GET --url 'http://localhost:8080/bonita/API/system/maintenance'
      x-accepts:
      - application/json
    put:
      description: |
        Update maintenance details
      operationId: updateMaintenanceDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceDetails'
        description: Maintenance details; One or all attributes can be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceDetails'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Update the maintenance details
      tags:
      - Maintenance
      x-content-type: application/json
      x-accepts:
      - application/json
  /API/system/license/unusedid:
    get:
      description: |
        Returns license information for the current server
      operationId: getLicense
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Get the current server license
      tags:
      - License
      x-accepts:
      - application/json
  /APIv2/service/install:
    post:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Upload an application configuration file in the `bconf` format.

        Warning: as of 9.0.0, uploading an application configuration file using this API is deprecated.
      operationId: uploadApplicationConfiguration
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadApplicationConfiguration_request'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: "Success: the temp file name as present on the server"
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Upload an application configuration file
      tags:
      - Application
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/plain
  /API/tenant/bdm:
    get:
      description: |
        Returns the current BDM. Make this call to get the status the BDM.
      operationId: getBdm
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bdm'
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Get the BDM
      tags:
      - BDM
      x-accepts:
      - application/json
    post:
      deprecated: true
      description: |
        Install a BDM

        Warning: as of 9.0.0, importing a BDM using this API is deprecated.
      operationId: installBDM
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BDMInstallRequest'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Install a BDM
      tags:
      - BDM
      x-content-type: application/json
      x-accepts:
      - application/json
  /portal/organizationUpload:
    post:
      description: |
        Upload organization
      operationId: uploadOrganization
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: tmp_organization_data.xml
                maxLength: 250
                pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
                type: string
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Import an organization
      tags:
      - Organization
      - Upload
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/plain
  /services/organization/import:
    post:
      description: |
        Import an organization
      operationId: importOrganization
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/importOrganization_request'
      responses:
        "200":
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Import an organization
      tags:
      - Organization
      x-content-type: application/x-www-form-urlencoded
      x-accepts:
      - application/json
  /portal/profilesUpload:
    post:
      deprecated: true
      description: |
        ![edition](https://img.shields.io/badge/edition-entreprise-blue)

        Upload profiles

        Warning: as of 9.0.0, uploading profiles using the portal is deprecated.
      operationId: uploadprofiles
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: tmp_profiles_data.xml
                maxLength: 250
                pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
                type: string
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Upload profiles
      tags:
      - Profile
      - Upload
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      - text/plain
  /services/profile/import:
    post:
      deprecated: true
      description: |
        Import profiles

        Warning: as of 9.0.0, importing profiles using this service is deprecated.
      operationId: importProfiles
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/importProfiles_request'
      responses:
        "200":
          description: 'Success '
        "400":
          content:
            application/json:
              example:
                message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request.
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization information is missing or invalid.
        "403":
          content:
            application/json:
              example:
                message: "Forbidden, The request contained valid data and was understood\
                  \ by the server, but the server is refusing action."
              schema:
                $ref: '#/components/schemas/Error'
          description: "Forbidden, The request contained valid data and was understood\
            \ by the server, but the server is refusing action."
        "404":
          content:
            application/json:
              example:
                message: Resource not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource for the specified ID was not found.
        "5XX":
          content:
            application/json:
              example:
                message: An unexpected error occured.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error.
      summary: Import profiles
      tags:
      - Profile
      x-content-type: application/x-www-form-urlencoded
      x-accepts:
      - application/json
components:
  parameters:
    pageIndex:
      description: index of the page to display
      example: "0"
      explode: true
      in: query
      name: p
      required: true
      schema:
        default: 0
        format: int32
        minimum: 0
        type: integer
      style: form
    pageCount:
      description: maximum number of elements to retrieve
      example: "10"
      explode: true
      in: query
      name: c
      required: true
      schema:
        default: 20
        format: int32
        minimum: 1
        type: integer
      style: form
    pageFilter:
      description: "can filter on attributes with the format f={filter\\_name}={filter\\\
        _value} with the name/value pair as url encoded string."
      example: abc%3d123
      explode: true
      in: query
      name: f
      required: false
      schema:
        items:
          maxLength: 250
          pattern: "^[A-Za-z0-9%]{0,250}$"
          type: string
        type: array
      style: form
    pageOrder:
      description: can order on attributes
      example: myProp%20ASC
      explode: true
      in: query
      name: o
      required: false
      schema:
        maxLength: 250
        pattern: "^[A-Za-z0-9%]{0,250}$"
        type: string
      style: form
    pageSearch:
      description: can search on attributes
      explode: true
      in: query
      name: s
      required: false
      schema:
        maxLength: 250
        pattern: "^[A-Za-z0-9%]{0,250}$"
        type: string
      style: form
  responses:
    BadRequest:
      content:
        application/json:
          example:
            message: Bad request
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request.
    Unauthorized:
      content:
        application/json:
          example:
            message: Unauthorized
          schema:
            $ref: '#/components/schemas/Error'
      description: Authorization information is missing or invalid.
    Forbidden:
      content:
        application/json:
          example:
            message: "Forbidden, The request contained valid data and was understood\
              \ by the server, but the server is refusing action."
          schema:
            $ref: '#/components/schemas/Error'
      description: "Forbidden, The request contained valid data and was understood\
        \ by the server, but the server is refusing action."
    ServerError:
      content:
        application/json:
          example:
            message: An unexpected error occured.
          schema:
            $ref: '#/components/schemas/Error'
      description: Unexpected error.
    NotFound:
      content:
        application/json:
          example:
            message: Resource not found.
          schema:
            $ref: '#/components/schemas/Error'
      description: The resource for the specified ID was not found.
    OK:
      description: OK
    NoContent:
      description: OK (no content).
  schemas:
    LoginRequest:
      example:
        username: install
        password: install
        redirect: "false"
        redirectURL: null
      properties:
        username:
          description: the username
          type: string
        password:
          description: the password
          format: password
          type: string
        tenant:
          description: the user tenant
          type: string
        redirect:
          default: "false"
          description: '"true" or "false". "false" indicates that the service should
            not redirect to Bonita Portal (after a successful login) or to the login
            page (after a login failure).'
          type: string
        redirectURL:
          default: ""
          description: the URL of the page to be displayed after login
          nullable: true
          type: string
      required:
      - password
      - username
      type: object
    Error:
      additionalProperties: true
      example:
        exception: exception
        explanations:
        - explanations
        - explanations
        message: message
      properties:
        message:
          description: The error message
          type: string
        exception:
          description: The exception type
          type: string
        explanations:
          description: Further details on the error
          items:
            type: string
          type: array
      type: object
    AbstractApplication:
      properties:
        createdBy:
          description: Author user ID
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        creationDate:
          description: creation date of the application
          type: string
        description:
          description: description of the application
          type: string
        displayName:
          description: display name of the application
          type: string
        id:
          description: id of the application
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        lastUpdateDate:
          description: last update date of the application
          type: string
        profileId:
          description: profile authorized to access this application
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        token:
          description: token of the application used to build the application URL
          type: string
        updatedBy:
          description: Last updating user ID
          type: string
        version:
          description: version of the application
          type: string
        state:
          description: application state
          enum:
          - ACTIVATED
          - DEACTIVATED
          type: string
        visibility:
          description: "visibility of the Application. This value is purely indicative,\
            \ changing it in the application object won't change the accessibility\
            \ to the actual application."
          enum:
          - ALL
          - TECHNICAL_USER
          - RESTRICTED
          type: string
          x-enumDescriptions:
            ALL: Everyone can use the application
            TECHNICAL_USER: Only the technical user can use the application
            RESTRICTED: Access to the application is determined by the user profile
        editable:
          description: Indicates whether the application can be modified
          type: boolean
      type: object
    ApplicationLink:
      allOf:
      - properties:
          link:
            description: true for an application link
            type: boolean
        type: object
      - $ref: '#/components/schemas/AbstractApplication'
      - description: Contains the meta information of a Bonita Living Application
          Link.
        type: object
      description: Contains the meta information of a Bonita Living Application Link.
      example:
        id: "306"
        link: "true"
        creationDate: "1411548289900"
        icon: ""
        createdBy": "1"
        profileId: "2"
        description: My application link description
        token: myadvapp
        state: ACTIVATED
        displayName: My app link
        updatedBy: "1"
        visibility: ALL
        editable: "true"
        lastUpdateDate: "1411548289900"
        version: "1.0"
      title: Application Link
    LegacyApplication:
      allOf:
      - properties:
          link:
            description: false for a legacy application
            type: boolean
        type: object
      - $ref: '#/components/schemas/AbstractApplication'
      - description: Contains the meta information of a legacy Bonita Living Application.
        properties:
          homePageId:
            description: id of the application page used as the home page
            maxLength: 250
            pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
            type: string
          layoutId:
            description: id of the layout used by the application
            maxLength: 250
            pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
            type: string
          themeId:
            description: id of the theme used by the application
            maxLength: 250
            pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
            type: string
        type: object
      description: Contains the meta information of a legacy Bonita Living Application.
      example:
        id: "305"
        link: "false"
        creationDate: "1411548289900"
        icon: ""
        createdBy": "1"
        profileId: "2"
        description: My application description
        token: myapp
        state: DEACTIVATED
        displayName: My app
        updatedBy: "1"
        visibility: ALL
        editable: "true"
        lastUpdateDate: "1411548289900"
        version: "1.0"
        homePageId: "26"
        themeId: "1"
        layoutId: "3"
      title: Legacy application
    Application:
      oneOf:
      - $ref: '#/components/schemas/ApplicationLink'
      - $ref: '#/components/schemas/LegacyApplication'
      x-one-of-name: Application
    CreateApplicationRequest:
      example:
        version: "1.0"
        profileId: "2"
        token: myapp
        displayName: My app
        description: My application description
      properties:
        description:
          description: description of the application
          type: string
        displayName:
          description: display name of the application
          type: string
        profileId:
          description: profile authorized to access this application
          type: string
        token:
          description: token of the application used to build the application URL
          type: string
        version:
          description: version of the application
          type: string
      type: object
    ApplicationUpdateRequest:
      example:
        version: "1.0"
        profileId: "2"
        token: myapp
        displayName: My app
        description: My application description
        themeId: "2"
        layoutId: "17"
      properties:
        description:
          description: description of the application
          type: string
        displayName:
          description: display name of the application
          type: string
        profileId:
          description: profile authorized to access this application
          type: string
        token:
          description: token of the application used to build the application URL
          type: string
        version:
          description: version of the application
          type: string
        themeId:
          description: |
            ![edition](https://img.shields.io/badge/edition-entreprise-blue)

            theme id for the application
          type: string
        layoutId:
          description: |
            ![edition](https://img.shields.io/badge/edition-entreprise-blue)

            layout id for the application
          type: string
      type: object
    FileUploadRequest:
      description: The file to upload
      properties:
        file:
          format: binary
          type: string
      type: object
    ApplicationMenu:
      example:
        id: "8"
        applicationId: "1"
        applicationPageId: "5"
        menuIndex: "1"
        parentMenuId: "-1"
        displayName: menuLabel
      properties:
        id:
          description: id of the application menu item
          type: string
        parentMenuId:
          description: "id of the parent menu of this menu item, or -1 for a top-level\
            \ item"
          type: string
        applicationPageId:
          description: "id of the application page targeted by this menu item, or\
            \ -1 if there is no targeted page (that is, the item is a parent menu)"
          type: string
        applicationId:
          description: id of the application related to this menu item
          type: string
        menuIndex:
          description: index of the menu item
          type: string
        displayName:
          description: label to display for this menu in the application navigation
            bar or menu
          type: string
      type: object
    ApplicationMenuCreateRequest:
      example:
        displayName: My updated label
      properties:
        displayName:
          description: display name of the application menu
          type: string
        applicationPageId:
          description: the application menu page ID
          type: string
        menuIndex:
          description: the application menu index
          type: string
        parentMenuId:
          description: the application parent menu ID
          type: string
      type: object
    ApplicationMenuUpdateRequest:
      example:
        displayName: menuLabel
        applicationId: "1"
        applicationPageId: "5"
        menuIndex: "1"
        parentMenuId: "-1"
      properties:
        parentMenuId:
          description: "id of the parent menu of this menu item, or -1 for a top-level\
            \ item"
          type: string
        applicationPageId:
          description: "id of the application page targeted by this menu item, or\
            \ -1 if there is no targeted page (that is, the item is a parent menu)"
          type: string
        applicationId:
          description: id of the application related to this menu item
          type: string
        menuIndex:
          description: index of the menu item
          type: string
        displayName:
          description: label to display for this menu in the application navigation
            bar or menu
          type: string
      type: object
    ApplicationPage:
      example:
        id: "9876"
        token: myPage
        applicationId: "1234"
        pageId: "5678"
      properties:
        id:
          description: id of the application page item
          type: string
        token:
          description: "token use to access the page using a URL : ../appName/pageToken/"
          type: string
        applicationId:
          description: id of the application related to this page
          type: string
        pageId:
          description: id of the custom page to display
          type: string
      type: object
    ApplicationPageCreateRequest:
      example:
        token: myPage
        applicationId: "1234"
        pageId: "5678"
      properties:
        token:
          description: "token use to access the page using a URL : ../appName/pageToken/"
          type: string
        applicationId:
          description: id of the application related to this page
          type: string
        pageId:
          description: id of the custom page to display
          type: string
      type: object
    AnyValue:
      description: "Can be any value - string, number, boolean, array or object or\
        \ null depending on your query."
      nullable: true
      type: object
    BusinessData:
      additionalProperties: true
      description: |
        Retrieve business data value. Depending on the object attribute loading policy,
        the API returns either the full object in JSON representation or the HATEOAS links to the object attributes.

        Long attributes use a string representation added in 7.0.1 as a workaround for the JavaScript integer spectrum issue.

        Representation of object attributes with an _always load_ policy:

        ```json
        {
          "persistenceId": _number_, // <-- deprecated
          "persistenceId_string": "_number_"
          "persistenceVersion": _number_, // <-- deprecated
          "persistenceVersion_string": "_number_"
          "attributeName":_attributeType_
          ...
        }
        ```

        The string representation added in 7.0.1 for Long attributes is a workaround for the JavaScript integer spectrum issue.

        HATEOAS representation of object attribute with a _load when needed_ policy:
        ```json
        "links":[
           {
           "rel":_string_
           "href":_uri_
           }
        ]
        ```
      example:
        persistenceId_string: "1"
        persistenceVersion_string: "0"
        contractName: contract for Netcom3
        terms:
        - persistenceId: 1
          persistenceId_string: "1"
          persistenceVersion: 0
          persistenceVersion_string: "0"
          termName: term Name
        - persistenceId: 2
          persistenceId_string: "2"
          persistenceVersion: 0
          persistenceVersion_string: "0"
          termName: term Name
        client:
          persistenceId: 13
          persistenceId_string: "13"
          persistenceVersion: 0
          persistenceVersion_string: "0"
          clientName: client name
          description: n/a
          industry:
          - persistenceId: 2
            persistenceId_string: "2"
            persistenceVersion: 0
            persistenceVersion_string: "0"
            industryName: Services
          - persistenceId: 3
            persistenceId_string: "3"
            persistenceVersion: 0
            persistenceVersion_string: "0"
            industryName: Software
      properties:
        persistenceId_string:
          description: Id of the business data object
          type: string
        persistenceVersion_string:
          description: Version of the business data object instance
          type: string
      type: object
    TenantResourceState:
      description: "Tenant resource state (BDM, BDM access control, ...)"
      enum:
      - INSTALLING
      - INSTALLED
      type: string
    BDMAccessControl:
      example:
        id: 4090
        name: bdm_access_control.xml
        type: BDM_ACCESS_CONTROL
        state: INSTALLED
        lastUpdatedBy: 4
        lastUpdateDate: 2018-01-17T17:05:36.671Z
      properties:
        id:
          description: Id of the BDM access control
          type: string
        name:
          description: BDM access control name
          type: string
        state:
          $ref: '#/components/schemas/TenantResourceState'
        lastUpdatedBy:
          description: "If `lastUpdatedBy: -1` it means that the access control were\
            \ last installed or updated by tenant_technical_user."
          type: string
        lastUpdateDate:
          description: Last date when the access control were installed or updated.
          type: string
      type: object
    ActivityType:
      description: the activity type (string)
      enum:
      - AUTOMATIC_TASK
      - HUMAN_TASK
      - USER_TASK
      - MANUAL_TASK
      - LOOP_ACTIVITY
      - MULTI_INSTANCE_ACTIVITY
      - CALL_ACTIVITY
      type: string
    ActivityState:
      description: the current state of the activity
      enum:
      - failed
      - initializing
      - ready
      - executing
      - completing
      - completed
      - waiting
      - skipped
      - cancelled
      - aborted
      - cancelling subtasks
      - aborting activity with boundary
      - completing activity with boundary
      type: string
    ActivityPriority:
      description: the priority of the current activity
      enum:
      - highest
      - above_normal
      - normal
      - under_normal
      - lowest
      type: string
    Activity:
      description: |
        Use this resource to retrieve activities (human or service tasks), call activities, and subprocesses currently running on the platform.
        It enables you to perform maintenance tasks like skipping or replaying a failed task and modifying variables.
      example:
        displayDescription: validate expense request
        executedBySubstitute: "0"
        caseId: "76539"
        parentCaseId: "68743"
        rootCaseId: "65879"
        processId: "7012"
        rootContainerId: "7000"
        state: completed
        type: the activity type as a string
        assigned_id: "304"
        assigned_date: 2014-10-17 16:05:42.626
        id: "809764"
        executedBy: "0"
        priority: the priority of the current activity as a string
        actorId: "50"
        description: In this step a manager reviews and validates an expense request.
        name: Validate
        reached_state_date: 2014-10-18 10:37:05.643
        displayName: Validate expense request
        dueDate: 2014-10-21 16:05:42.626
        last_update_date: 2014-10-18 10:37:05.643
      properties:
        id:
          description: the activity id
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        type:
          $ref: '#/components/schemas/ActivityType'
        name:
          description: the activity technical name
          type: string
        displayName:
          description: the human readable activity name
          type: string
        description:
          description: the activity description
          type: string
        displayDescription:
          description: the human readable activity description
          type: string
        state:
          $ref: '#/components/schemas/ActivityState'
        reached_state_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this activity reached\
            \ the current state, for example '2014-10-17 16:05:42.626'"
          type: string
        last_update_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this activity was\
            \ last updated, for example '2014-10-17 16:05:42.626)"
          type: string
        dueDate:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this activity is\
            \ due, for example '2014-10-17 16:05:42.626'"
          type: string
        priority:
          $ref: '#/components/schemas/ActivityPriority'
        processId:
          description: the process definition id of the process instance which define
            this activity
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        parentCaseId:
          description: "the immediate containing process instance id (long, a.k.a\
            \ process instance id)"
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        rootCaseId:
          description: "the top/root process instance id (long, a.k.a case id). In\
            \ case of an event sub process, `parentCaseId` will the id of the process\
            \ instance called while `rootCaseId` will be the one from the caller process\
            \ instance"
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        rootContainerId:
          description: same as rootCaseId
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        executedBy:
          description: the id of the user who performed this activity. The activity
            has to be a human task otherwise its value will be 0
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        executedBySubstitute:
          description: the id of the user who did actually performed the activity
            when it has been done in the name of someone else. Value is 0 otherwise
          type: string
        actorId:
          description: "the id of the actor that can execute this activity, null otherwise"
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        assigned_id:
          description: "the user id that this activity is assigned to, or 0 if it\
            \ is unassigned"
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        assigned_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when the current activity\
            \ was assigned, for example '2014-10-17 16:05:42.626'"
          pattern: "^\\d{4}-\\d{2}-\\d{2}\\s\\d+:\\d+:\\d+\\.\\d+$"
          type: string
      type: object
    ActivityUpdateRequest:
      example:
        variables: "[{\"name\":\"foo\",\"value\":\"bar\"}]"
        state: completed
      properties:
        variables:
          description: |
            Activity variables to update.

            **Note**: if there is no data with the specified name in the activity,
            the update will be applied to the process data if a variable with the specified name exists.

            **Note**: if the task definition includes a connector that is executed on finish and updates the value of a variable, the value set by the REST API call is overwritten.
          type: string
        state:
          description: |
            The target state of the activity
            - Execute a task: `completed`
            - Skip activity: `skipped` - Make this call after all failed connectors have been reset ![edition](https://img.shields.io/badge/edition-entreprise-blue)
            - Replay activity: `replay`
          type: string
      type: object
    ArchivedActivity:
      description: "Use this resource to retrieve finished activities (human or service\
        \ tasks), call activities, and subprocesses."
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        archivedDate: archivedDate
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        sourceObjectId: sourceObjectId
        type: AUTOMATIC_TASK
        priority: highest
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
      properties:
        id:
          description: the archived activity id
          type: string
        type:
          $ref: '#/components/schemas/ActivityType'
        name:
          description: the archived activity technical name
          type: string
        displayName:
          description: the human readable archived activity name
          type: string
        description:
          description: the archived activity description
          type: string
        displayDescription:
          description: the human readable archived activity description
          type: string
        state:
          $ref: '#/components/schemas/ActivityState'
        reached_state_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this archived activity\
            \ reached the current state, for example '2014-10-17 16:05:42.626'"
          type: string
        last_update_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this archived activity\
            \ was last updated, for example '2014-10-17 16:05:42.626)"
          type: string
        dueDate:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this archived activity\
            \ is due, for example '2014-10-17 16:05:42.626'"
          type: string
        priority:
          $ref: '#/components/schemas/ActivityPriority'
        processId:
          description: the process definition id of the process instance which define
            this archived activity
          type: string
        parentCaseId:
          description: the immediate containing process instance id (a.k.a case id)
          type: string
        rootCaseId:
          description: "the top/root process instance id (a.k.a case id). In case\
            \ of an \"event sub process\", `parentCaseId` will the id of the process\
            \ instance called while `rootCaseId` will be the one from the caller case"
          type: string
        rootContainerId:
          description: same as `rootCaseId`
          type: string
        executedBy:
          description: the id of the user who performed this archived activity. The
            archived activity has to be a human task otherwise its value will be 0
          type: string
        executedBySubstitute:
          description: the id of the user who did actually performed the archived
            activity when it has been done in the name of someone else. Value is 0
            otherwise
          type: string
        actorId:
          description: "the id of the actor that can execute this archived activity,\
            \ null otherwise"
          type: string
        assigned_id:
          description: "the user id that this archived activity is assigned to, or\
            \ 0 if it is unassigned"
          type: string
        assigned_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when the current archived\
            \ activity was assigned, for example '2014-10-17 16:05:42.626'"
          type: string
        sourceObjectId:
          description: the original id of the archived activity before it was archived
          type: string
        archivedDate:
          description: "the date (('yyyy-MM-dd HH:mm:ss.SSS')) when this archived\
            \ activity was archived, for example '2014-10-17 16:05:42.626'"
          type: string
      type: object
    AbstractTask:
      example:
        displayDescription: This is my subtask
        executedBySubstitute: 1
        processId: 8367255255370238000
        parentCaseId: 1
        state: ready
        rootContainerId: 1
        type: MANUAL_TASK
        assigned_id: 1
        assigned_date: 2014-12-01 17:39:53.784
        id: 40006
        executedBy: 1
        caseId: 1
        priority: above_normal
        actorId: 1
        description: This is my subtask
        name: My subtask
        reached_state_date: 2014-12-01 17:39:53.784
        rootCaseId: 1
        displayName: My subtask
        parentTaskId: 40001
        dueDate: 2014-12-25 00:00:00.000
        last_update_date: 2014-12-01 17:39:53.784
      properties:
        id:
          description: the task id
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        type:
          description: the task type
          type: string
        name:
          description: the task technical name
          type: string
        displayName:
          description: the human readable task name
          type: string
        description:
          description: the task description
          type: string
        displayDescription:
          description: the human readable task description
          type: string
        state:
          $ref: '#/components/schemas/ActivityState'
        reached_state_date:
          description: the date ('yyyy-MM-dd HH:mm:ss.SSS') when this task reached
            the current state for example '2014-10-17 16:05:42.626'
          pattern: "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$"
          type: string
        last_update_date:
          description: the date ('yyyy-MM-dd HH:mm:ss.SSS') when this task was last
            updated for example '2014-10-17 16:05:42.626)
          pattern: "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$"
          type: string
        dueDate:
          description: the date ('yyyy-MM-dd HH:mm:ss.SSS') when this task is due
            for example '2014-10-17 16:05:42.626'
          pattern: "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$"
          type: string
        priority:
          description: the priority (string) of the current task
          type: string
        processId:
          description: the process definition id of the process instance which define
            this task
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        parentCaseId:
          description: the immediate containing process instance id (case id)
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        parentTaskId:
          description: the parent Task id
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        rootCaseId:
          description: the top/root process instance id (case id). In case of an "event
            sub process" `parentCaseId` will the id of the process instance called
            while `rootCaseId` will be the one from the caller process instance
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        rootContainerId:
          description: same as rootCaseId
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        executedBy:
          description: the id of the user who performed this task. The task has to
            be a human task otherwise its value will be 0
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        executedBySubstitute:
          description: the id of the user who did actually performed the task when
            it has been done in the name of someone else. Value is 0 otherwise
          type: string
        actorId:
          description: the id of the actor that can execute this task null otherwise
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        assigned_id:
          description: the user id that this task is assigned to or 0 if it is unassigned
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        assigned_date:
          description: the date ('yyyy-MM-dd HH:mm:ss.SSS') when the current task
            was assigned for example '2014-10-17 16:05:42.626'
          pattern: "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$"
          type: string
        isTerminal:
          description: True if the task is the last one in a flow
          type: boolean
      type: object
    HumanTask:
      allOf:
      - $ref: '#/components/schemas/AbstractTask'
      - description: |
          A Human task is Manual task or a User task. A User task is a task that can be done by a user.
          A Manual task is a subtask of a user task, and is also done by a user.
        example:
          displayDescription: null
          executedBySubstitute: 0
          processId: 5826139717723008000
          state: ready
          rootContainerId: 1002
          type: USER_TASK
          assigned_id: null
          assigned_date: null
          id: 20004
          executedBy: 0
          caseId: 1002
          priority: normal
          actorId: 102
          description: null
          name: Analyse case
          reached_state_date: 2014-09-05 11:11:30.808
          displayName: Analyse case
          dueDate: 2014-09-05 12:11:30.775
          last_update_date: 2014-09-05 11:11:30.808
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        parentTaskId: parentTaskId
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        isTerminal: true
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
    HumanTaskUpdateRequest:
      example:
        assigned_id: "1234"
        state: new_state
      properties:
        assigned_id:
          description: The id of the user to assign this Human task to
          type: string
        state:
          description: state of the HumanTask
          type: string
      type: object
    ManualTask:
      allOf:
      - $ref: '#/components/schemas/AbstractTask'
      - description: Use the manualTask resource to access process subtasks. For archived
          subtasks use archivedManualTask.
        example:
          displayDescription: This is my subtask
          executedBySubstitute: 1
          processId: 8367255255370238000
          parentCaseId: 1
          state: ready
          rootContainerId: 1
          type: MANUAL_TASK
          assigned_id: 1
          assigned_date: 2014-12-01 17:39:53.784
          id: 40006
          executedBy: 1
          caseId: 1
          priority: above_normal
          actorId: 1
          description: This is my subtask
          name: My subtask
          reached_state_date: 2014-12-01 17:39:53.784
          rootCaseId: 1
          displayName: My subtask
          parentTaskId: 40001
          dueDate: 2014-12-25 00:00:00.000
          last_update_date: 2014-12-01 17:39:53.784
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        parentTaskId: parentTaskId
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        isTerminal: true
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
    ManualTaskCreateRequest:
      example:
        parentTaskId: "40001"
        state: ready
        name: My subtask
        description: This is my subtask
        priority: above_normal
        dueDate: 2014-12-25 00:00:00.000
        assigned_id: "1"
      properties:
        parentTaskId:
          description: The parent task ID
          type: string
        state:
          description: The task state
          type: string
        name:
          description: The task name
          type: string
        description:
          description: The task description
          type: string
        priority:
          description: The task priority
          type: string
        dueDate:
          description: The task due date
          type: string
        assigned_id:
          description: The id of the user assigned to the task
          type: string
      type: object
    ManualTaskUpdateRequest:
      example:
        state: completed
        executedBy: "1"
      properties:
        state:
          description: State of the ManualTask (completed)
          type: string
        executedBy:
          description: Id of the task executor
          type: string
      type: object
    Task:
      allOf:
      - $ref: '#/components/schemas/AbstractTask'
      - description: A process task
        example:
          displayDescription: null
          executedBySubstitute: 0
          processId: 9132099022957911000
          parentCaseId: 5
          state: ready
          rootContainerId: 5
          type: USER_TASK
          assigned_id: 4
          assigned_date: 2014-12-01 16:22:54.685
          id: 10
          executedBy: 0
          caseId: 5
          priority: normal
          actorId: 6
          description: null
          name: Step1
          reached_state_date: 2014-12-01 16:22:50.814
          rootCaseId: 5
          displayName: Step1
          dueDate: 2014-12-01 17:22:50.809
          last_update_date: 2014-12-01 16:22:50.814
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        parentTaskId: parentTaskId
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        isTerminal: true
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
    UpdateTaskByIdRequest:
      additionalProperties: true
      example:
        displayName: displayName
        state: state
      properties:
        state:
          description: state of the Task (completed)
          type: string
        displayName:
          description: display name of the Task
          type: string
      type: object
    UserTask:
      allOf:
      - $ref: '#/components/schemas/AbstractTask'
      - description: An executable task that is performed by a user.
        example:
          displayDescription: ""
          executedBySubstitute: 0
          processId: 5826139717723008000
          state: ready
          rootContainerId: 1002
          type: USER_TASK
          assigned_id: null
          assigned_date: ""
          id: 20004
          executedBy: 0
          caseId: 1002
          priority: normal
          actorId: 102
          description: ""
          name: Analyse case
          reached_state_date: 2014-09-05 11:11:30.808
          displayName: Analyse case
          dueDate: 2014-09-05 12:11:30.775
          last_update_date: 2014-09-05 11:11:30.808
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        parentTaskId: parentTaskId
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        isTerminal: true
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
    UserTaskUpdateRequest:
      example:
        assigned_id: "1"
        state: skipped
      properties:
        state:
          description: The UserTask state
          type: string
        assigned_id:
          description: The id of the user assign to  the UserTask
          type: string
      type: object
    ContractConstraint:
      example:
        inputNames:
        - inputNames
        - inputNames
        expression: expression
        name: name
        explanation: explanation
      properties:
        name:
          description: constraint name
          type: string
        expression:
          description: constraint expression
          type: string
        explanation:
          description: constraint explanation
          type: string
        inputNames:
          items:
            type: string
          type: array
      type: object
    ContractInputType:
      description: the contract input type (string)
      enum:
      - TEXT
      - BOOLEAN
      - DATE
      - INTEGER
      - DECIMAL
      - BYTE_ARRAY
      - FILE
      - LONG
      - LOCALDATE
      - LOCALDATETIME
      - OFFSETDATETIME
      type: string
    ContractInput:
      example:
        inputs:
        - null
        - null
        name: name
        multiple: multiple
        description: description
        type: TEXT
      properties:
        description:
          description: input description
          type: string
        name:
          description: input name
          type: string
        multiple:
          description: true if input contains multiple values
          type: string
        type:
          $ref: '#/components/schemas/ContractInputType'
        inputs:
          items:
            $ref: '#/components/schemas/ContractInput'
          type: array
      type: object
    Contract:
      example:
        inputs:
        - inputs:
          - null
          - null
          name: name
          multiple: multiple
          description: description
          type: TEXT
        - inputs:
          - null
          - null
          name: name
          multiple: multiple
          description: description
          type: TEXT
        constraints:
        - inputNames:
          - inputNames
          - inputNames
          expression: expression
          name: name
          explanation: explanation
        - inputNames:
          - inputNames
          - inputNames
          expression: expression
          name: name
          explanation: explanation
      properties:
        constraints:
          items:
            $ref: '#/components/schemas/ContractConstraint'
          type: array
        inputs:
          items:
            $ref: '#/components/schemas/ContractInput'
          type: array
      type: object
    AbstractArchivedTask:
      allOf:
      - $ref: '#/components/schemas/AbstractTask'
      - description: An Archived task is a task that has been archived
        properties:
          sourceObjectId:
            description: the original id of the task before it was archived
            maxLength: 250
            pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
            type: string
          archivedDate:
            description: the date ('yyyy-MM-dd HH:mm:ss.SSS') when the current task
              was assigned for example '2014-10-17 16:05:42.626'
            pattern: "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$"
            type: string
        type: object
    ArchivedHumanTask:
      allOf:
      - $ref: '#/components/schemas/AbstractArchivedTask'
      - description: An Archived Human task is a User task or Manual task that has
          been archived
        example:
          displayDescription: ""
          executedBySubstitute: "0"
          processId: "5826139717723008213"
          state: skipped
          rootContainerId: "1002"
          type: USER_TASK
          assigned_id: "2"
          id: "240002"
          executedBy: "0"
          sourceObjectId: "20004"
          caseId: "1002"
          priority: normal
          actorId: "102"
          description: ""
          name: Analyse case
          reached_state_date: 2014-09-09 17:21:51.946
          displayName: Analyse case
          archivedDate: 2014-09-09 17:21:51.986
          dueDate: 2014-09-05 12:11:30.775
          last_update_date: 2014-09-09 17:21:51.946
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        archivedDate: archivedDate
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        parentTaskId: parentTaskId
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        isTerminal: true
        sourceObjectId: sourceObjectId
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
    ArchivedManualTask:
      allOf:
      - $ref: '#/components/schemas/AbstractArchivedTask'
      - description: Use the archivedManualTask resource to access archived process
          subtasks.
        example:
          displayDescription: this is a test
          executedBySubstitute: 1
          processId: 8367255255370238000
          parentCaseId: 1
          state: completed
          rootContainerId: 1
          type: MANUAL_TASK
          assigned_id: 1
          id: 160007
          sourceObjectId: 40003
          executedBy: 1
          caseId: 1
          priority: highest
          actorId: 1
          description: this is a test
          name: myTest
          reached_state_date: 2014-12-01 17:20:47.200
          rootCaseId: 1
          archivedDate: 2014-12-01 17:20:47.217
          displayName: myTest
          parentTaskId: 40001
          dueDate: 2014-12-17 00:00:00.000
          last_update_date: 2014-12-01 17:20:47.200
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        archivedDate: archivedDate
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        parentTaskId: parentTaskId
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        isTerminal: true
        sourceObjectId: sourceObjectId
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
    ArchivedUserTask:
      allOf:
      - $ref: '#/components/schemas/AbstractArchivedTask'
      - description: An executable task that has been performed by a user or skipped
          and is archived.
        example:
          displayDescription: null
          executedBySubstitute: 0
          processId: 5826139717723008000
          state: skipped
          rootContainerId: 1002
          type: USER_TASK
          assigned_id: 2
          id: 240002
          executedBy: 0
          caseId: 1002
          priority: normal
          actorId: 102
          description: null
          name: Analyse case
          reached_state_date: 2014-09-09 17:21:51.946
          displayName: Analyse case
          archivedDate: 2014-09-09 17:21:51.986
          dueDate: 2014-09-05 12:11:30.775
          last_update_date: 2014-09-09 17:21:51.946
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        archivedDate: archivedDate
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        parentTaskId: parentTaskId
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        isTerminal: true
        sourceObjectId: sourceObjectId
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
    ArchivedTask:
      allOf:
      - $ref: '#/components/schemas/AbstractArchivedTask'
      - description: Use the archived task resource to get information about archived
          tasks.
        example:
          displayDescription: null
          executedBySubstitute: 4
          processId: 9132099022957911000
          parentCaseId: 5
          state: completed
          rootContainerId: 5
          type: USER_TASK
          assigned_id: 4
          id: 9
          sourceObjectId: 10
          executedBy: 4
          caseId: 5
          priority: normal
          actorId: 6
          description: null
          name: Step1
          reached_state_date: 2014-12-01 16:24:32.457
          rootCaseId: 5
          archivedDate: 2014-12-01 16:24:32.460
          displayName: Step1
          dueDate: 2014-12-01 17:22:50.809
          last_update_date: 2014-12-01 16:24:32.457
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        archivedDate: archivedDate
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        displayName: displayName
        parentTaskId: parentTaskId
        dueDate: dueDate
        executedBySubstitute: executedBySubstitute
        description: description
        isTerminal: true
        sourceObjectId: sourceObjectId
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: failed
        parentCaseId: parentCaseId
        last_update_date: last_update_date
        assigned_id: assigned_id
    ActivityVariable:
      description: "This resource enables you to retrieve the value of a specific\
        \ variable name for a specific process instance (or case). Only persistent\
        \ variables are concerned by this resource, not transient variables."
      example:
        tenantId: 0
        tenantId_string: 0
        id: 5010
        id_string: 5010
        name: RequestValidationData
        description: null
        transientData: false
        className: java.lang.String
        containerId: 20004
        containerId_string: 20004
        containerType: ACTIVITY_INSTANCE
        value: Confirmed
      properties:
        tenantId:
          description: The ID of the tenant where the current user is logged in (technical
            information)
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        tenantId_string:
          description: number (since 7.0.1)
          type: string
        id:
          description: The identifier of the variable
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        id_string:
          description: number (since 7.0.1)
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        name:
          description: The name of the activity variable
          type: string
        description:
          description: The description of the variable if any
          type: string
        transientData:
          description: "FALSE"
          type: string
        className:
          description: The fully qualified class name of the variable type
          type: string
        containerId:
          description: The ID of the activity containing this variable (same as the
            one passed as parameter) if the variable is defined at activity level
            or ID of the process instance if the variable is defined on the process
          type: string
        containerId_string:
          description: number (since 7.0.1)
          type: string
        containerType:
          description: ACTIVITY_INSTANCE | PROCESS_INSTANCE depending on whether the
            variable is defined at activity or process level.
          enum:
          - ACTIVITY_INSTANCE
          - PROCESS_INSTANCE
          type: string
        value:
          description: the value of this variable. The format of the value depends
            on the type of the variable
          type: string
      type: object
    ArchivedActivityVariable:
      description: "This resource enables you to retrieve the value of a specific\
        \ archived variable name for a specific case (or process instance). Only persistent\
        \ variables are concerned by this resource, not transient variables."
      example:
        name: RequestValidationData
        description: null
        type: java.lang.String
        containerId: 20004
        containerType: ACTIVITY_INSTANCE
        value: Confirmed
        archivedDate: 2021-12-27 23:10:59.342
        sourceObjectId: 42
      properties:
        name:
          description: The name of the archived  activity variable
          type: string
        description:
          description: The description of the variable if any
          type: string
        type:
          description: The fully qualified class name of the variable type
          type: string
        containerId:
          description: The ID of the activity containing this variable (same as the
            one passed as parameter)
          type: string
        containerType:
          description: ACTIVITY_INSTANCE
          type: string
        value:
          description: the value of this variable. The format of the value depends
            on the type of the variable
          type: string
        archivedDate:
          description: The date when this variable was archived. The date format is
            yyyy-MM-dd HH:mm:ss.SSS
          type: string
        sourcedObjectId:
          description: The id of the activity variable before it was archived
          type: string
      type: object
    ProcessInstanceVariable:
      description: A process instance  variable
      example:
        description: ""
        name: myInvoiceAmount
        value: "14.2"
        case_id: 1
        type: java.lang.Float
      properties:
        description:
          description: "Detailed description of the process instance variable, as\
            \ set in the definition at design-time"
          type: string
        name:
          description: name of the variable in the process instance
          type: string
        value:
          description: the current value of the process instance variable
          type: string
        case_id:
          description: ID of the process instance this variable belongs to
          type: string
        type:
          description: the Java type of the variable
          type: string
      type: object
    ArchivedProcessInstanceVariable:
      description: An archived case variable
      example:
        name: RequestValidationData
        description: null
        type: java.lang.String
        case_id: 20004
        value: Confirmed
        archivedDate: 2021-12-27 23:10:59.342
        sourceObjectId: 42
      properties:
        name:
          description: The name of the variable
          type: string
        description:
          description: "Detailed description of the case variable, as set in the definition\
            \ at design-time"
          type: string
        type:
          description: The fully qualified class name of the variable type
          type: string
        case_id:
          description: ID of the case this variable belongs to
          type: string
        value:
          description: the value of this variable. The format of the value depends
            on the type of the variable
          type: string
        archivedDate:
          description: The date when this variable was archived. The date format is
            yyyy-MM-dd HH:mm:ss.SSS
          type: string
        sourcedObjectId:
          description: The id of the variable before it was archived
          type: string
      type: object
    ProcessInstanceVariableUpdateRequest:
      example:
        type: java.lang.String
        value: My new value
      properties:
        type:
          description: the java class name
          type: string
        value:
          description: the new value
          type: string
      type: object
    ProcessInstanceDocument:
      description: A document in an active case
      example:
        id: "3"
        creationDate: 2014-10-09 16:45:36.658
        author: "1"
        index: "-1"
        contentMimetype: application/octet-stream
        caseId: "1"
        contentStorageId: "4"
        isInternal: "true"
        description: draft
        name: Doc 1
        fileName: document_1.jpg
        submittedBy: "1"
        url: documentDownload?fileName=document_1.jpg&contentStorageId=4
        version: "1"
      properties:
        id:
          description: documentId
          type: string
        creationDate:
          description: date and time
          type: string
        author:
          deprecated: true
          description: submittorUserId
          type: string
        index:
          description: "index in a list of documents, or -1 for a single document"
          type: string
        contentMimetype:
          description: MIME type
          type: string
        caseId:
          description: caseId
          type: string
        contentStorageId:
          description: storageId
          type: string
        isInternal:
          description: "`true` if  the the document object contains the content directly.\
            \ `false` if the document is specified by URL so the document object contains\
            \ a reference to the content, not the content itself."
          type: boolean
        description:
          description: description
          type: string
        name:
          description: name
          type: string
        fileName:
          description: filename
          type: string
        submittedBy:
          description: submittorUserId
          type: string
        url:
          description: urlForDownload
          type: string
        version:
          description: version
          type: string
      type: object
    ProcessInstanceDocumentCreateRequest:
      example:
        caseId: "1"
        file: doc.jpg
        name: Doc 1
        fileName: document_1.jpg
        description: draft
      properties:
        caseId:
          description: The process instance id
          type: string
        file:
          description: The local file name to upload from (as from the temp upload
            folder)
          type: string
        url:
          description: The remote url to upload from
          type: string
        name:
          description: The file display name
          type: string
        fileName:
          description: The target file name
          type: string
        description:
          description: The document description
          type: string
      type: object
    ProcessInstanceDocumentUpdateRequest:
      example:
        file: Expense policy rev2.pdf
        description: updated version of document
        fileName: revision2.pdf
      properties:
        file:
          description: The local file name to upload from (as from the temp upload
            folder)
          type: string
        url:
          description: The remote url to upload from
          type: string
        name:
          description: The file display name
          type: string
        fileName:
          description: The target file name
          type: string
        description:
          description: The document description
          type: string
      type: object
    ArchivedProcessInstanceDocument:
      allOf:
      - $ref: '#/components/schemas/ProcessInstanceDocument'
      - description: A document in an active case
        example:
          id: "1"
          creationDate: 2014-10-09 16:39:52.472
          author: "1"
          index: "0"
          contentMimetype: text/plain
          caseId: "1"
          contentStorageId: "1"
          isInternal: "true"
          description: ""
          name: myDoc
          fileName: test1.txt
          submittedBy: "1"
          url: documentDownload?fileName=test1.txt&contentStorageId=1
          version: "1"
          sourceObjectId: "1"
          archivedDate: 2014-10-09 17:39:52.473
        properties:
          sourceObjectId:
            description: original document id
            type: string
          archivedDate:
            description: the date ('yyyy-MM-dd HH:mm:ss.SSS') when the current task
              was assigned for example '2014-10-17 16:05:42.626'
            pattern: "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$"
            type: string
        type: object
      example:
        submittedBy: submittedBy
        archivedDate: archivedDate
        fileName: fileName
        author: author
        contentStorageId: contentStorageId
        index: index
        description: description
        sourceObjectId: sourceObjectId
        creationDate: creationDate
        contentMimetype: contentMimetype
        version: version
        url: url
        isInternal: true
        caseId: caseId
        name: name
        id: id
    Actor:
      description: ""
      example:
        id: "1"
        process_id: "4717422838168315799"
        description: null
        name: employee
        displayName: Employee actor
      properties:
        id:
          description: actor id
          format: int64
          type: integer
        process_id:
          description: process definition id
          format: int64
          type: integer
        description:
          description: a description of the actor
          type: string
        name:
          description: name of the actor (as specified on human tasks and for the
            initiator of the process)
          type: string
        displayName:
          description: the display name of the actor
          type: string
      type: object
    ActorUpdateRequest:
      example:
        displayName: My actor
        description: My actor description
      properties:
        displayName:
          description: display name of the Actor
          type: string
        description:
          description: description of the Actor
          type: string
      type: object
    ActorMember:
      description: "An actor member represents the association between the organization\
        \ and the actor af a process. In an organization we have four member_types\
        \ = USER, GROUP, ROLE and MEMBERSHIP (role in a group). You can assign a actor\
        \ to a user by specifying a role and or a group, or specific user."
      example:
        id: "206"
        actor_id: "2"
        role_id: "4"
        group_id: "8"
        user_id: "-1"
      properties:
        id:
          description: actor member id
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        actor_id:
          description: id of the actor for this mapping
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        role_id:
          description: "id of role, or -1 if the member type is not role"
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        group_id:
          description: "id of group, or -1 if the member type is not group"
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
        user_id:
          description: "id of user, or -1 if the member type is not user"
          maxLength: 250
          pattern: "^[A-Za-z0-9\\_\\-\\.]{0,250}$"
          type: string
      type: object
    ProcessInstance:
      description: "ProcessInstance (Case) is an instance of a process. When you start\
        \ a process, it creates a process instances."
      example:
        id: 1
        end_date": ""
        failedFlowNodes": 9
        startedBySubstitute": 345
        start": 2014-11-27 17:55:00.906
        activeFlowNodes": "9"
        state": started
        rootCaseId": "1"
        started_by": 989
        processDefinitionId": "5777042023671752656"
        last_update_date": 2014-11-27 17:55:00.906
        searchIndex1Label: mySearchIndex1Label
        searchIndex2Label: mySearchIndex2Label
        searchIndex3Label: mySearchIndex3Label
        searchIndex4Label: mySearchIndex4Label
        searchIndex5Label: mySearchIndex5Label
        searchIndex1Value: mySearchIndex1Value
        searchIndex2Value: mySearchIndex2Value
        searchIndex3Value: mySearchIndex3Value
        searchIndex4Value: mySearchIndex4Value
        searchIndex5Value: mySearchIndex5Value
      properties:
        id:
          description: the identifier of the ProcessInstance (Case)
          type: string
        end_date:
          description: the date set when the process instance is closed
          type: string
        failedFlowNodes:
          description: count of failed flow nodes if parameter n=failedFlowNodes is
            given
          type: string
        startedBySubstitute:
          description: the identifier of the substitute user (as Process manager or
            Administrator) who started the process. It can be also the substitute
            user if d=startedBySubstitute is given.
          type: string
        start:
          description: the starting date of the case
          type: string
        activeFlowNodes:
          description: count of active flow nodes if parameter n=activeFlowNodes is
            given
          type: string
        state:
          description: "state: an enum that represent the state of the process instances"
          enum:
          - initializing
          - started
          - suspended
          - cancelled
          - aborted
          - completing
          - completed
          - error
          - aborting
          type: string
        rootCaseId:
          description: the identifier of the container of the case
          type: string
        started_by:
          description: the identifier of the user who started the case
          type: string
        processDefinitionId:
          description: the identifier of the process related of the case
          type: string
        last_update_date:
          description: the date of the last update done on the case
          type: string
        searchIndex1Label:
          description: "the 1st search index label (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex2Label:
          description: "the 2nd search index label (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex3Label:
          description: "the 3rd search index label (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex4Label:
          description: "the 4th search index label (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex5Label:
          description: "the 5th search index label (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex1Value:
          description: "the 1st search index value (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex2Value:
          description: "the 2nd search index value (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex3Value:
          description: "the 3rd search index value (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex4Value:
          description: "the 4th search index value (from 6.5, in Subscription editions\
            \ only)"
          type: string
        searchIndex5Value:
          description: "the 5th search index value (from 6.5, in Subscription editions\
            \ only)"
          type: string
      type: object
    ProcessVariable:
      additionalProperties:
        type: object
      properties:
        name:
          description: variable name
          type: string
      type: object
    ProcessInstanceCreateRequest:
      example:
        processDefinitionId: "5777042023671752656"
        variables:
        - name: stringVariable
          value: aValue
        - name: dateVariable
          value: 349246800000
        - name: numericVariable
          value: 55
      properties:
        processDefinitionId:
          description: the process definition Id
          type: string
        variables:
          description: process variables initial values
          items:
            $ref: '#/components/schemas/ProcessVariable'
          type: array
      type: object
    ArchivedProcessInstance:
      allOf:
      - $ref: '#/components/schemas/ProcessInstance'
      - description: A completed instance of a process.
        example:
          id: 9
          end_date: 2014-10-22 10:57:00.299
          startedBySubstitute: "4"
          sourceObjectId: "3"
          start: 2014-10-22 10:56:53.415
          state: completed
          rootCaseId: "3"
          started_by: "4"
          archivedDate: 2014-10-22 10:57:00.299
          processDefinitionId: "6054482369194211518"
          last_update_date": 2014-10-22 10:57:00.299
          searchIndex1Label: case9SearchIndex1Label
          searchIndex2Label: case9SearchIndex2Label
          searchIndex3Label: case9SearchIndex3Label
          searchIndex4Label: case9SearchIndex4Label
          searchIndex5Label: case9SearchIndex5Label
          searchIndex1Value: case9SearchIndex1Value
          searchIndex2Value: case9SearchIndex2Value
          searchIndex3Value: case9SearchIndex3Value
          searchIndex4Value: case9SearchIndex4Value
          searchIndex5Value: case9SearchIndex5Value
        properties:
          sourceObjectId:
            description: the id of the process instance before it was archived
            type: string
          archivedDate:
            description: the date set when the process instance was archived
            type: string
        type: object
      example:
        end_date: end_date
        searchIndex5Label: searchIndex5Label
        archivedDate: archivedDate
        processDefinitionId: processDefinitionId
        searchIndex3Value: searchIndex3Value
        searchIndex4Value: searchIndex4Value
        searchIndex2Label: searchIndex2Label
        start: start
        searchIndex1Value: searchIndex1Value
        sourceObjectId: sourceObjectId
        searchIndex3Label: searchIndex3Label
        failedFlowNodes: failedFlowNodes
        startedBySubstitute: startedBySubstitute
        searchIndex5Value: searchIndex5Value
        searchIndex2Value: searchIndex2Value
        rootCaseId: rootCaseId
        id: id
        state: initializing
        searchIndex1Label: searchIndex1Label
        activeFlowNodes: activeFlowNodes
        started_by: started_by
        searchIndex4Label: searchIndex4Label
        last_update_date: last_update_date
    ProcessInstanceInfo:
      description: "Retrieves information about a process instances. It returns counters\
        \ for each flow node in the process instances, showing the number of flow\
        \ node instances that are in each state (possible states are: ready, executing,\
        \ waiting, initializing, failed, completing, completed, skipped, cancelled,\
        \ aborted). If there are no flow node instances in a given state, no counter\
        \ is returned for that state for the flow node."
      example:
        id: 123
        flowNodeStatesCounters:
          Step1:
            completed: 2
            ready: 1
            executing: 5
          Step3:
            completed: 10
            failed: 2
      properties:
        id:
          description: case identifier
          type: string
        flowNodeStatesCounters:
          additionalProperties:
            $ref: '#/components/schemas/ProcessInstanceInfo_flowNodeStatesCounters_value'
          description: flow nodes counters
          type: object
      type: object
    ProcessInstanceComment:
      description: ""
      example:
        content: Need to review the last inputs of this case
        tenantId: "1"
        id: "20005"
        processInstanceId: "1"
        postDate: 2016-06-16 14:51:33.053
        userId: 9798
      properties:
        id:
          description: the comment id
          type: string
        content:
          description: the comment content
          type: string
        tenantId:
          description: the id of the tenant the comment is associated to
          type: string
        processInstanceId:
          description: the process instance (case) the comment is associated to
          type: string
        postDate:
          description: the comment creation date
          type: string
        userId:
          description: the user that created the comment
          type: string
      type: object
    ProcessInstanceCommentCreateRequest:
      example:
        processInstanceId: "5777042023671752656"
        content: The process instance has been started
      properties:
        processInstanceId:
          description: the process instance (case) the comment is associated to
          type: string
        content:
          description: the comment content
          type: string
      type: object
    ArchivedProcessInstanceComment:
      allOf:
      - $ref: '#/components/schemas/ProcessInstanceComment'
      - description: Information about the comment of an archived process instances.
        example:
          id: 20005
          content: Need to review the last inputs of this case
          processInstanceId: 1
          postDate: 2016-06-16 14:51:33.053
          archivedDate: 2016-06-17 10:18:24.723
          userId: 30
        properties:
          archivedDate:
            description: the date set when the process instance comment was archived
            type: string
        type: object
      example:
        archivedDate: archivedDate
        processInstanceId: processInstanceId
        tenantId: tenantId
        postDate: postDate
        id: id
        userId: userId
        content: content
    ActivationState:
      description: the state of the process definition (ENABLED or DISABLED)
      enum:
      - ENABLED
      - DISABLED
      type: string
    ConfigurationState:
      description: the configuration state of the process (UNRESOLVED or RESOLVED)
      enum:
      - RESOLVED
      - UNRESOLVED
      type: string
    ProcessDefinition:
      description: ""
      example:
        displayDescription: displayDescription
        displayName: displayName
        icon: icon
        description: description
        deployedBy: deployedBy
        activationState: ENABLED
        version: version
        deploymentDate: deploymentDate
        name: name
        id: id
        configurationState: RESOLVED
        actorinitiatorid: actorinitiatorid
        last_update_date: last_update_date
      properties:
        id:
          description: the identifier of the process definition (long)
          type: string
        icon:
          description: icon path
          type: string
        displayDescription:
          description: the human readable activity description
          type: string
        deploymentDate:
          description: the date when the process definition was deployed
          type: string
        description:
          description: the process description
          type: string
        activationState:
          $ref: '#/components/schemas/ActivationState'
        name:
          description: the process name
          type: string
        deployedBy:
          description: the id of the user who deployed the process
          type: string
        displayName:
          description: the human readable process description
          type: string
        actorinitiatorid:
          description: the id of the actor that can initiate process instances of
            the process
          type: string
        last_update_date:
          description: the date when the process definition was last updated
          type: string
        configurationState:
          $ref: '#/components/schemas/ConfigurationState'
        version:
          description: the version of the process
          type: string
      type: object
    ProcessCreateRequest:
      example:
        fileupload: tmp_4431838172282406107.bar
      properties:
        fileupload:
          description: the bar file to deploy (previously uploaded in tmp folder)
          type: string
      type: object
    ProcessUpdateRequest:
      example:
        displayName: Leave booking process
      properties:
        displaydescription:
          description: description of the Process
          type: string
        displayName:
          description: display name of the Process
          type: string
        activationState:
          $ref: '#/components/schemas/ActivationState'
      type: object
    FlowElementContainerDefinition:
      description: "Allows to access all flow elements (activities, gateways, events\
        \ and transitions) of a process or sub-process."
      example:
        intermediateCatchEvents:
        - key: ""
        - key: ""
        documentListDefinitions:
        - key: ""
        - key: ""
        dataDefinitions:
        - key: ""
        - key: ""
        connectors:
        - key: ""
        - key: ""
        businessDataDefinitions:
        - key: ""
        - key: ""
        activities:
        - key: ""
        - key: ""
        intermediateThrowEvents:
        - key: ""
        - key: ""
        endEvents:
        - key: ""
        - key: ""
        transitions:
        - key: ""
        - key: ""
        startEvents:
        - key: ""
        - key: ""
        gatewaysList:
        - key: ""
        - key: ""
        documentDefinitions:
        - key: ""
        - key: ""
      properties:
        activities:
          items:
            additionalProperties: true
            type: object
          type: array
        transitions:
          items:
            additionalProperties: true
            type: object
          type: array
        gatewaysList:
          items:
            additionalProperties: true
            type: object
          type: array
        startEvents:
          items:
            additionalProperties: true
            type: object
          type: array
        intermediateCatchEvents:
          items:
            additionalProperties: true
            type: object
          type: array
        intermediateThrowEvents:
          items:
            additionalProperties: true
            type: object
          type: array
        endEvents:
          items:
            additionalProperties: true
            type: object
          type: array
        dataDefinitions:
          items:
            additionalProperties: true
            type: object
          type: array
        documentDefinitions:
          items:
            additionalProperties: true
            type: object
          type: array
        connectors:
          items:
            additionalProperties: true
            type: object
          type: array
        businessDataDefinitions:
          items:
            additionalProperties: true
            type: object
          type: array
        documentListDefinitions:
          items:
            additionalProperties: true
            type: object
          type: array
      type: object
    DesignProcessDefinitionParamater:
      example:
        name: name
        description: description
        type: type
      properties:
        type:
          description: the parameter type
          type: string
        description:
          description: the parameter description
          type: string
        name:
          description: the parameter name
          type: string
      type: object
    ActorDefinition:
      description: Actor definition
      example:
        initiator: true
        name: name
        description: description
      properties:
        name:
          description: the actor name
          type: string
        description:
          description: the actor description
          type: string
        initiator:
          description: "true, if this actor can start the process"
          type: boolean
      type: object
    Expression:
      example:
        name: name
        expressionType: expressionType
        interpreter: interpreter
        id: id
        content: content
        returnType: returnType
        dependencies:
        - null
        - null
      properties:
        id:
          description: the expression id
          type: string
        name:
          description: the expression name
          type: string
        content:
          description: the expression content
          type: string
        expressionType:
          description: the expression type
          type: string
        returnType:
          description: the expression return type
          type: string
        interpreter:
          description: the expression interpreter
          type: string
        dependencies:
          description: the expression dependencies
          items:
            $ref: '#/components/schemas/Expression'
          type: array
      type: object
    DesignProcessDefinitionContext:
      description: The process definition expressions
      example:
        expression:
          name: name
          expressionType: expressionType
          interpreter: interpreter
          id: id
          content: content
          returnType: returnType
          dependencies:
          - null
          - null
        key: key
      properties:
        key:
          type: string
        expression:
          $ref: '#/components/schemas/Expression'
      type: object
    DesignProcessDefinition:
      description: Represents the Design Definition of a process. It gives access
        to process attributes.
      example:
        displayDescription: displayDescription
        stringIndexLabels:
        - stringIndexLabels
        - stringIndexLabels
        displayName: displayName
        flowElementContainer:
          intermediateCatchEvents:
          - key: ""
          - key: ""
          documentListDefinitions:
          - key: ""
          - key: ""
          dataDefinitions:
          - key: ""
          - key: ""
          connectors:
          - key: ""
          - key: ""
          businessDataDefinitions:
          - key: ""
          - key: ""
          activities:
          - key: ""
          - key: ""
          intermediateThrowEvents:
          - key: ""
          - key: ""
          endEvents:
          - key: ""
          - key: ""
          transitions:
          - key: ""
          - key: ""
          startEvents:
          - key: ""
          - key: ""
          gatewaysList:
          - key: ""
          - key: ""
          documentDefinitions:
          - key: ""
          - key: ""
        actorInitiator:
          initiator: true
          name: name
          description: description
        contract:
          inputs:
          - inputs:
            - null
            - null
            name: name
            multiple: multiple
            description: description
            type: TEXT
          - inputs:
            - null
            - null
            name: name
            multiple: multiple
            description: description
            type: TEXT
          constraints:
          - inputNames:
            - inputNames
            - inputNames
            expression: expression
            name: name
            explanation: explanation
          - inputNames:
            - inputNames
            - inputNames
            expression: expression
            name: name
            explanation: explanation
        context:
        - expression:
            name: name
            expressionType: expressionType
            interpreter: interpreter
            id: id
            content: content
            returnType: returnType
            dependencies:
            - null
            - null
          key: key
        - expression:
            name: name
            expressionType: expressionType
            interpreter: interpreter
            id: id
            content: content
            returnType: returnType
            dependencies:
            - null
            - null
          key: key
        actorsList:
        - initiator: true
          name: name
          description: description
        - initiator: true
          name: name
          description: description
        stringIndexValues:
        - name: name
          expressionType: expressionType
          interpreter: interpreter
          id: id
          content: content
          returnType: returnType
          dependencies:
          - null
          - null
        - name: name
          expressionType: expressionType
          interpreter: interpreter
          id: id
          content: content
          returnType: returnType
          dependencies:
          - null
          - null
        parameters:
        - name: name
          description: description
          type: type
        - name: name
          description: description
          type: type
      properties:
        displayName:
          description: The process definition display name
          type: string
        displayDescription:
          description: The process definition display description name
          type: string
        flowElementContainer:
          $ref: '#/components/schemas/FlowElementContainerDefinition'
        parameters:
          description: The process parameter definitions
          items:
            $ref: '#/components/schemas/DesignProcessDefinitionParamater'
          type: array
        actorsList:
          description: The list of process actor definitions
          items:
            $ref: '#/components/schemas/ActorDefinition'
          type: array
        actorInitiator:
          $ref: '#/components/schemas/ActorDefinition'
        stringIndexLabels:
          description: The process definition labels
          items:
            type: string
          type: array
        stringIndexValues:
          description: The process definition expressions
          items:
            $ref: '#/components/schemas/Expression'
          type: array
        contract:
          $ref: '#/components/schemas/Contract'
        context:
          description: The process definition expressions
          items:
            $ref: '#/components/schemas/DesignProcessDefinitionContext'
          type: array
      type: object
    ProcessInstantiationResponse:
      example:
        caseId: "12345678"
      properties:
        caseId:
          type: string
      type: object
    ProcessInfo:
      description: "Retrieves the execution data of all open cases of a process. It\
        \ returns counters for each flow node in the process, showing the number of\
        \ flow node instances that are in an non-final state (possible states are:\
        \ ready, executing, waiting, initializing, failed, completing). If there are\
        \ no flow node instances in a given state, no counter is returned for that\
        \ state for the flow node."
      example:
        processDefinitionId: 123
        flowNodeStatesCounters:
          Step1:
            executing: 2
            ready: 1
            failed: 5
          Step3:
            ready: 10
            failed: 2
      properties:
        processDefinitionId:
          description: process identifier
          type: string
        flowNodeStatesCounters:
          additionalProperties:
            $ref: '#/components/schemas/ProcessInfo_flowNodeStatesCounters_value'
          description: flow nodes counters
          type: object
      type: object
    UpdateProcessConnectorByProcessIdRequest:
      example:
        id: 8491796209115952722/scripting-groovy-script/1.0.1
        implementation: tmp_7006630415905915150.zip
      properties:
        id:
          description: "Id of the process for which to update the connector, combined\
            \ with connector name and version separated by slashes (x/y/z)"
          type: string
        implementation:
          description: "Previously uploaded temp file name of the updated version\
            \ of the connector (returned by the  [upload file api](#operation/uploadFile))"
          type: string
      type: object
    ProcessParameter:
      description: ""
      example:
        process_id: 4880205209556179000
        process_name: myProcessName
        description: myProcessDescription
        name: myParameterName
        value: myParameterValue
        process_version: "1.0"
        type: java.lang.String
      properties:
        process_id:
          description: the identifier of the process definition
          type: string
        process_name:
          description: the name of the related process
          type: string
        description:
          description: the description of the parameter
          type: string
        name:
          description: the name of the parameter
          type: string
        value:
          description: the value of the parameter
          type: string
        process_version:
          description: the version of the process
          type: string
        type:
          description: the type of the parameter
          type: string
      type: object
    ProcessParameterUpdateRequest:
      example:
        value: myNewValue
      properties:
        value:
          description: value of the Process Parameter
          type: string
      type: object
    ProcessResolutionProblem:
      description: "This resource represents a problem in a process that needs to\
        \ be resolved for the process to run. It can be an actor, a connector implementation,\
        \ or a parameter (in the Enterprise, Performance, Efficiency, or Teamwork\
        \ edition)."
      example:
        target_type: target_type
        resource_id: resource_id
        message: message
      properties:
        message:
          description: resolution problem
          type: string
        resource_id:
          description: id of the unresolved resource
          type: string
        target_type:
          description: "the type of the unresolved resource (parameter, actor, or\
            \ connector)"
          type: string
      type: object
    ProcessSupervisor:
      description: "The process supervisor has management rights over a process. He\
        \ can configure and monitor it. You can give the ProcessSupervisor rights\
        \ to some users by specifying a role and or a group, or a specific user. In\
        \ order to be able to manage the processes he supervises in the portal, a\
        \ user should also have the profile `Process Manager`"
      example:
        process_id: 8040901857674754000
        user_id: 2
        role_id: -1
        group_id: -1
      properties:
        process_id:
          description: Id of the process
          type: string
        role_id:
          description: "Id of role, or -1 if the supervisor type is not role or membership"
          type: string
        group_id:
          description: "Id of group, or -1 if the supervisor type is not group or\
            \ membership"
          type: string
        user_id:
          description: "Id of user, or -1 if the supervisor type is not user"
          type: string
      type: object
    ProcessConnectorDependency:
      description: Use the processConnectorDependency resource to access connector
        dependencies.
      example:
        connector_version: 1.0.0
        connector_process_id: 4971555129176050000
        filename: bonita-connector-email-impl-1.0.12.jar
        connector_name: email
      properties:
        connector_version:
          description: <connector version>
          type: string
        connector_process_id:
          description: <process id>
          type: string
        filename:
          description: <filename representing the connector>
          type: string
        connector_name:
          description: <connector name>
          type: string
      type: object
    ConnectorFailure:
      description: ""
      example:
        errorMessage: Error while executing the groovy script
        connectorInstanceId: 5
        errorStackTrace: "org.bonitasoft.engine.core.connector.exception.SConnectorException:\
          \ PROCESS_DEFINITION_ID=8030057793979348308 | PROCESS_NAME=Pool1 | PROCESS_VERSION=1.0\
          \ | PROCESS_INSTANCE_ID=5 | ROOT_PROCESS_INSTANCE_ID=5 | FLOW_NODE_DEFINITION_ID=-6089366458284481881\
          \ | FLOW_NODE_INSTANCE_ID=12 | FLOW_NODE_NAME=Étape1 | CONNECTOR_DEFINITION_IMPLEMENTATION_CLASS_NAME=expression\
          \ execution connector | CONNECTOR_INSTANCE_ID=5 | org.bonitasoft.engine.connector.exception.SConnectorException:\
          \ java.util.concurrent.ExecutionException: java.lang.Exception: Error while\
          \ executing the groovy script\n\tat org.bonitasoft.engine.core.connector.impl.ConnectorServiceImpl.executeConnectorInClassloader(ConnectorServiceImpl.java:332)"
      properties:
        errorMessage:
          description: the message of the connector failure
          type: string
        connectorInstanceId:
          description: the ID of the connector instance (see connectorInstance resource
            documentation)
          type: string
        errorStackTrace:
          description: the stack trace of the error
          type: string
      type: object
    ConnectorInstance:
      description: ""
      example:
        containerType: flowNode
        connectorId: scripting-groovy-script
        id: 3
        name: hello world
        activationEvent: ON_FINISH
        state: TO_BE_EXECUTED
        containerId: 15
        version: 1.0.0
      properties:
        containerType:
          description: the type of the containing activity
          type: string
        connectorId:
          description: the connector id
          type: string
        id:
          description: 'the connector instance id '
          format: int64
          type: integer
        name:
          description: the connector name
          type: string
        activationEvent:
          description: the name of the event that activated the connector instance
          enum:
          - ON_ENTER
          - ON_FINISH
          type: string
        state:
          description: the connector state
          enum:
          - TO_BE_EXECUTED
          - EXECUTING
          - TO_RE_EXECUTE
          - DONE
          - FAILED
          - SKIPPED
          type: string
        containerId:
          description: the containing activity instance id
          type: string
        version:
          description: the connector version
          type: string
      type: object
    ArchivedConnectorInstance:
      allOf:
      - $ref: '#/components/schemas/ConnectorInstance'
      - description: Information about archived connector instances attached to an
          archived process or an archived flow node.
        properties:
          archivedDate:
            description: the date ('yyyy-MM-dd HH:mm:ss.SSS') when the current task
              was assigned for example '2014-10-17 16:05:42.626'
            pattern: "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$"
            type: string
        type: object
      example:
        archivedDate: archivedDate
        containerType: containerType
        connectorId: connectorId
        name: name
        activationEvent: ON_ENTER
        id: 0
        state: TO_BE_EXECUTED
        containerId: containerId
        version: version
    FlowNode:
      description: "A flow node (gateway, event, or task) in an open instance of a\
        \ process."
      example:
        displayDescription": ""
        executedBySubstitute": 0
        processId": 7596769292810274000
        parentCaseId": 1
        state": failed
        rootContainerId": 1
        type": USER_TASK
        assigned_id": null
        assigned_date": ""
        id": "77456"
        executedBy": 0
        caseId": 1
        priority": normal
        actorId": 4
        description": ""
        name": Step1
        reached_state_date": 2014-12-10 08:59:47.884
        rootCaseId": 1
        displayName": Step1
        dueDate": 2014-12-10 09:59:47.855
        last_update_date": 2014-12-10 08:59:47.884
      properties:
        id:
          description: 'the flow node id '
          type: string
        displayDescription:
          description: 'the human readable flow node description '
          type: string
        executedBySubstitute:
          description: "the id of the user who really performed this flow node when\
            \ a substitute did it, or 0 if the flow node was not performed by a substitute"
          type: string
        caseId:
          description: the process instance id that is associated with this flow node
          type: string
        parentCaseId:
          description: the parent process instance id that is associated with this
            flow node's case
          type: string
        rootCaseId:
          description: the root process instance initiator id that is associated with
            this flow node's case
          type: string
        processId:
          description: the process id that is associated with this flow node
          type: string
        rootContainerId:
          description: the root process id of the root process instance that is associated
            with this flow node
          type: string
        state:
          description: "the current state of the flow node (ready, completed, failed)"
          type: string
        type:
          description: 'the flow node type '
          type: string
        assigned_id:
          description: "the user id that this flow node is assigned to, or 0 if it\
            \ is unassigned"
          type: string
        assigned_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when the current flow\
            \ node was assigned, for example '2014-10-17 16:05:42.626'"
          type: string
        executedBy:
          description: "the id of the user who executed the flow node, or 0 if the\
            \ flow node has not been executed"
          type: string
        priority:
          description: the priority of the current flow node
          type: string
        actorId:
          description: "the id of the actor that can execute this flow node, null\
            \ otherwise"
          type: string
        description:
          description: 'the flow node description '
          type: string
        name:
          description: 'the flow node name '
          type: string
        reached_state_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this flow node reached\
            \ the current state, for example '2014-10-17 16:05:42.626'"
          type: string
        displayName:
          description: the display name of this flow node
          type: string
        dueDate:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this flow node is\
            \ due, for example '2014-10-17 16:05:42.626'"
          type: string
        last_update_date:
          description: "the date ('yyyy-MM-dd HH:mm:ss.SSS') when this flow node was\
            \ last updated, for example '2014-10-17 16:05:42.626)"
          type: string
        parentTaskId":
          description: "in case of a subtask, the parent task id "
          type: string
      type: object
    FlowNodeUpdateRequest:
      example:
        state: replay
      properties:
        state:
          description: state of the FlowNode
          type: string
      type: object
    ArchivedFlowNode:
      allOf:
      - $ref: '#/components/schemas/FlowNode'
      - description: A flow node (gateway or event or task) in an archived instance
          of a process.
        properties:
          sourceObjectId:
            description: the original id of the flowNode before it was archived
            type: string
          archivedDate:
            description: the date ('yyyy-MM-dd HH:mm:ss.SSS') when the current task
              was assigned for example '2014-10-17 16:05:42.626'
            pattern: "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$"
            type: string
        type: object
      example:
        displayDescription: displayDescription
        executedBy: executedBy
        archivedDate: archivedDate
        rootContainerId: rootContainerId
        assigned_date: assigned_date
        parentTaskId": parentTaskId"
        displayName: displayName
        executedBySubstitute: executedBySubstitute
        dueDate: dueDate
        description: description
        sourceObjectId: sourceObjectId
        type: type
        priority: priority
        actorId: actorId
        processId: processId
        caseId: caseId
        name: name
        reached_state_date: reached_state_date
        rootCaseId: rootCaseId
        id: id
        state: state
        parentCaseId: parentCaseId
        assigned_id: assigned_id
        last_update_date: last_update_date
    TimerEventTrigger:
      description: BPM timer event triggers
      example:
        id: 4015
        id_string: "4015"
        eventInstanceId: 2
        eventInstanceId_string: "2"
        executionDate: 1413980484194
        eventInstanceName: Timer1
      properties:
        id:
          description: the ID of the timer returned
          type: string
        id_string:
          description: the ID of the timer returned
          type: string
        eventInstanceId:
          description: the ID of the event instance to which this trigger is related
          type: string
        eventInstanceId_string:
          description: the ID of the event instance to which this trigger is related
          type: string
        executionDate:
          description: "the long value of the next execution date (number of milliseconds\
            \ from January 1st, 1970 00:00:00)"
          type: string
        eventInstanceName:
          description: the name of the event instance to which this trigger is related
          type: string
      type: object
    TimerEventTriggerUpdateRequest:
      example:
        executionDate: 1433980484194
      properties:
        executionDate:
          description: executionDate of the TimerEventTrigger
          format: int64
          type: integer
      type: object
    TimerEventTriggerUpdateResponse:
      example:
        executionDate: 1433980484194
      properties:
        executionDate:
          description: executionDate of the TimerEventTrigger
          format: int64
          type: integer
      type: object
    Message:
      description: "Use this resource to send BPM message events. Message events are\
        \ caught by processes using `catch message event` flow nodes (Start, intermediate,\
        \ boundary or receive tasks)."
      example:
        messageName: messageName
        correlations:
          key:
            type: java.lang.String
            value: value
        targetProcess: targetProcess
        targetFlowNode: targetFlowNode
        messageContent:
          key:
            type: java.lang.String
            value: value
      properties:
        messageName:
          description: the message name
          type: string
        targetProcess:
          description: the target process name
          type: string
        targetFlowNode:
          description: the target FlowNode name
          type: string
        messageContent:
          additionalProperties:
            $ref: '#/components/schemas/Message_messageContent_value'
          description: the message content
          type: object
        correlations:
          additionalProperties:
            $ref: '#/components/schemas/Message_messageContent_value'
          description: the message correlations
          maxItems: 5
          type: object
      type: object
    Signal:
      description: Signal
      example:
        name: name
      properties:
        name:
          description: the signal name
          type: string
      type: object
    CustomUserDefinition:
      description: Custom user definition
      example:
        id: 101
        name: skill
        description: Team player
      properties:
        id:
          description: definition id
          type: string
        description:
          description: definition description
          type: string
        name:
          description: definition name
          type: string
      type: object
    CustomUserDefinitionCreateRequest:
      example:
        name: skill
        description: Team player
      properties:
        name:
          description: definition name
          type: string
        description:
          description: definition description
          type: string
      type: object
    CustomUserValue:
      description: ""
      example:
        userId: userId
        value: value
        definitionId: definitionId
      properties:
        userId:
          description: user id
          type: string
        value:
          description: definition value
          type: string
        definitionId:
          description: definition id
          type: string
      type: object
    CustomUserValueUpdateRequest:
      example:
        value: My new value
      properties:
        value:
          description: new value to set
          type: string
      type: object
    CustomUser:
      description: Custom user defintion and value
      example:
        userId: userId
        value: value
        definitionId:
          id: 101
          name: skill
          description: Team player
      properties:
        userId:
          description: user id
          type: string
        value:
          description: definition value
          type: string
        definitionId:
          $ref: '#/components/schemas/CustomUserDefinition'
      type: object
    FormMapping:
      description: "Form Mapping specifies the mapping of a form to a process or a\
        \ task. The mapping indicates the technology used to create the form, in the\
        \ `target` attribute."
      example:
        id: 5
        processDefinitionId: 7281286536417002000
        type: TASK
        target: URL
        task: Validate Feedback
        pageId: null
        pageMappingKey: taskInstance/myProcess/1.0/Validate Feedback
        lastUpdatedBy: 4
        lastUpdateDate: 1425295012666
        url: http://customerportal.bonitasoft.com
      properties:
        id:
          description: the form mapping identifier
          type: string
        processDefinitionId:
          description: the process identifier related to this form mapping
          type: string
        type:
          description: the form mapping type
          enum:
          - PROCESSSTART
          - PROCESSOVERVIEW
          - TASK
          type: string
        target:
          description: the target
          enum:
          - URL
          - INTERNAL
          - LEGACY
          - UNDEFINED
          - NONE
          type: string
        task:
          description: the task name when type is TASK - null otherwise
          type: string
        pageId:
          description: the custom page identifier when type is INTERNAL - null otherwise
          type: string
        pageMappingKey:
          description: the page mapping key part used to generate the form URL
          type: string
        lastUpdateBy:
          description: the identifier of the user who last updated this form mapping
            - 0 if no update has been done yet
          type: string
        lastUpdateDate:
          description: the last update date in milliseconds - null if no update has
            been done yet
          type: string
        url:
          description: the external URL (string) when type is URL - null otherwise
          type: string
      type: object
    FormMappingUpdateRequest:
      example:
        pageId: "123"
        url: http://somewhe.re/over/the/rainbow
      properties:
        pageId:
          description: pageId of the FormMapping
          type: string
        url:
          description: url of the FormMapping
          type: string
      type: object
    ProfessionalContactData:
      description: ""
      example:
        id: 4
        fax_number: 484-302-0766
        building: "70"
        phone_number: 484-302-5766
        website: ""
        zipcode: "19108"
        state: PA
        city: Philadelphia
        country: United States
        mobile_number: ""
        address: Renwick Drive
        email: walter.bates@acme.com
        room: ""
      properties:
        id:
          description: user ID
          type: string
        fax_number:
          description: fax number
          type: string
        building:
          description: building
          type: string
        phone_number:
          description: phone number
          type: string
        website:
          description: website
          type: string
        zipcode:
          description: zipcode
          type: string
        state:
          description: state
          type: string
        city:
          description: city
          type: string
        country:
          description: country
          type: string
        mobile_number:
          description: mobile phone number
          type: string
        address:
          description: address
          type: string
        room:
          description: room
          type: string
        email:
          description: email
          type: string
      required:
      - id
      type: object
    Group:
      description: Group
      example:
        id: 3
        creation_date: 2014-12-02 11:33:48.501
        created_by_user_id: -1
        icon: ""
        parent_path: /acme
        description: This group represents the finance department of the ACME organization
        name: finance
        path: /acme/finance
        parent_group_id: 1
        displayName: Finance
        last_update_date: 2014-12-02 11:33:48.501
      properties:
        id:
          description: group ID
          type: string
        name:
          description: name
          type: string
        displayName:
          description: display name
          type: string
        parent_path:
          description: the path of the parent group of this group (empty if the group
            has no parent)
          type: string
        parent_group_id:
          description: the id of the parent group of this group (empty if the group
            has no parent)
          type: string
        path:
          description: the full path of the group (including its parent path)
          type: string
        description:
          description: description
          type: string
        creation_date:
          description: "creation date (format: `2014-12-31 15:17:24.736`)"
          type: string
        created_by_user_id:
          description: id of the user who created the group (-1 if the group was created
            by the tenant admin or by an organisation import)
          type: string
        last_update_date:
          description: "last update date (format: `2014-12-31 15:17:24.736`)"
          type: string
        icon:
          description: icon path
          type: string
      required:
      - name
      type: object
    GroupCreateRequest:
      example:
        icon: ""
        name: HR
        displayName: Human Resources
        description: Human resources department
      properties:
        name:
          description: name
          type: string
        displayName:
          description: display name
          type: string
        parent_group_id:
          description: the id of the parent group of this group (empty if the group
            has no parent)
          type: string
        description:
          description: description
          type: string
        icon:
          description: icon path
          type: string
      required:
      - name
      type: object
    GroupUpdateRequest:
      example:
        name: HR
        displayName: Humman resources
      properties:
        name:
          description: name
          type: string
        displayName:
          description: display name
          type: string
        parent_group_id:
          description: the id of the parent group of this group (empty if the group
            has no parent)
          type: string
        description:
          description: description
          type: string
        icon:
          description: icon path
          type: string
      required:
      - name
      type: object
    Membership:
      description: ""
      example:
        assigned_date: 2014-12-02 17:57:09.315
        role_id": 4
        assigned_by_user_id: 12
        group_id: 5
        user_id: 125
      properties:
        assigned_date:
          description: "creation date (format: `2014-12-31 15:17:24.736`)"
          type: string
        role_id:
          description: id of the role of this membership
          format: int64
          type: integer
        assigned_by_user_id:
          description: id of the user who created the membership (-1 if the role was
            created by the tenant admin or by an organisation import)
          type: string
        group_id:
          description: id of the group of this membership
          type: string
        user_id:
          description: id of the user in this membership
          type: string
      type: object
    MembershipCreateRequest:
      example:
        user_id: "4"
        group_id: "5"
        role_id: "1"
      properties:
        role_id:
          description: id of the role of this membership
          type: string
        group_id:
          description: id of the group of this membership
          type: string
        user_id:
          description: id of the user in this membership
          type: string
      required:
      - group_id
      - role_id
      - user_id
      type: object
    Role:
      description: The role of a user in a group
      example:
        icon: ""
        name: manager
        displayName: department manager
        description: manager of the department
        creation_date: 2014-12-01 18:51:54.791
        created_by_user_id: 4
        last_update_date: 2014-12-01 18:51:54.791
      properties:
        id:
          description: role ID
          type: string
        name:
          description: name
          type: string
        displayName:
          description: display name
          type: string
        description:
          description: description
          type: string
        icon:
          description: icon path
          type: string
        creation_date:
          description: "creation date (format: `2014-12-31 15:17:24.736`)"
          type: string
        created_by_user_id:
          description: Id of the user who created the role (-1 if the role was created
            by the tenant admin or by an organisation import)
          type: string
        last_update_date:
          description: "last update date (format: `2014-12-31 15:17:24.736`)"
          type: string
      type: object
    RoleCreateRequest:
      example:
        icon: ""
        name: manager
        displayName: department manager
        description: manager of the department
      properties:
        name:
          description: name
          type: string
        displayName:
          description: display name
          type: string
        description:
          description: description
          type: string
        icon:
          description: icon path
          type: string
      required:
      - name
      type: object
    RoleUpdateRequest:
      example:
        displayName: displayName
        name: name
        icon: icon
        description: description
      properties:
        name:
          description: name
          type: string
        displayName:
          description: display name
          type: string
        description:
          description: description
          type: string
        icon:
          description: icon path
          type: string
      required:
      - name
      type: object
    User:
      example:
        firstname: firstname
        icon: icon
        creation_date: creation_date
        userName: userName
        title: title
        created_by_user_id: created_by_user_id
        enabled: enabled
        lastname: lastname
        last_connection: last_connection
        password: password
        manager_id: manager_id
        id: id
        job_title: job_title
        last_update_date: last_update_date
      properties:
        id:
          description: user id
          type: string
        enabled:
          description: "if \"true\", user is active."
          type: string
        userName:
          description: user name
          type: string
        firstname:
          description: user last name
          type: string
        lastname:
          description: user last name
          type: string
        password:
          description: user password
          format: password
          type: string
        icon:
          description: ' bonita icon path (ie. /default/icon_user.png)'
          type: string
        title:
          description: user title
          type: string
        job_title:
          description: user job title
          type: string
        manager_id:
          description: user manager id
          type: string
        last_connection:
          description: last connection date
          type: string
        created_by_user_id:
          description: created by
          type: string
        creation_date:
          description: creation date
          type: string
        last_update_date:
          description: user last update date
          type: string
      type: object
    UserCreateRequest:
      example:
        userName: New.User
        password: bpm
        password_confirm: bpm
        icon: ""
        firstname: New
        lastname: User
        title: Mr
        job_title: Human resources benefits
        manager_id: "3"
        enabled: "true"
      properties:
        userName:
          description: user name
          type: string
        firstname:
          description: user last name
          type: string
        lastname:
          description: user last name
          type: string
        password:
          description: user password
          format: password
          type: string
        password_confirm:
          description: user password confirmation
          format: password
          type: string
        icon:
          description: ' bonita icon path (ie. /default/icon_user.png)'
          type: string
        title:
          description: user title
          type: string
        job_title:
          description: user job title
          type: string
        manager_id:
          description: user manager id
          type: string
        enabled:
          description: true|false if the user is enabled or not
          type: string
      required:
      - enabled
      - firstname
      - lastname
      - password
      - password_confirm
      - userName
      type: object
    UserUpdateRequest:
      example:
        firstname: firstname
        password: password
        manager_id: manager_id
        icon: icon
        userName: userName
        title: title
        job_title: job_title
        enabled: enabled
        lastname: lastname
      properties:
        enabled:
          description: "if \"true\", user will be activated."
          type: string
        userName:
          description: user name
          type: string
        firstname:
          description: user last name
          type: string
        lastname:
          description: user last name
          type: string
        password:
          description: user password
          format: password
          type: string
        icon:
          description: ' bonita icon path (ie. /default/icon_user.png)'
          type: string
        title:
          description: user title
          type: string
        job_title:
          description: user job title
          type: string
        manager_id:
          description: user manager id
          type: string
      type: object
    Platform:
      description: The bonita platform
      example:
        createdBy: platformAdmin
        created: 2014-12-04 15:46:46.065
        initialVersion: 6.4.0
        state: STARTED
        previousVersion: ""
        version: 6.4.0
      properties:
        state:
          description: platform state
          enum:
          - STARTED
          - STOPPED
          type: string
        version:
          description: the current version of the platform
          type: string
        initialVersion:
          description: the version in which the platform was created
          type: string
        previousVersion:
          description: the previous version the platform was in or empty if there
            is none
          type: string
        createdBy:
          description: the user name of the platform administrator
          type: string
        created:
          description: the creation date
          type: string
      type: object
    PlatformUpdateRequest:
      example:
        state: stop
      properties:
        state:
          description: Platform state
          enum:
          - start
          - stop
          type: string
      type: object
    Tenant:
      deprecated: true
      description: "Since Bonita 7.12, tenant management is deprecated"
      example:
        id: 1
        creation: 2014-12-04 15:46:46.256
        icon: /default.png
        username: ""
        description: Default tenant
        name: default
        state: ACTIVATED
        password: ""
      properties:
        id:
          description: id of the tenant
          type: string
        creation:
          description: the creation date
          type: string
        icon:
          description: the path of the icon
          type: string
        name:
          description: the name of the tenant
          type: string
        description:
          description: the description
          type: string
        username:
          description: the username
          type: string
        password:
          description: the password
          format: password
          type: string
        state:
          description: the tenant state
          enum:
          - ACTIVATED
          - DEACTIVATED
          type: string
      type: object
    TenantCreateRequest:
      deprecated: true
      description: "Since Bonita 7.12, tenant creation is deprecated"
      example:
        name: MyTenant
        description: My tenant
        username: john
        password: bpm
      properties:
        name:
          description: the name of the tenant
          type: string
        description:
          description: the description
          type: string
        username:
          description: the username
          type: string
        password:
          description: the password
          format: password
          type: string
      type: object
    TenantUpdateRequest:
      deprecated: true
      description: "Since Bonita 7.12, tenant update is deprecated"
      example:
        name: MyTenant
        description: My new tenant description
        username: john
        password: bpm
        icon: /default.png
        state: ACTIVATED
      properties:
        name:
          description: the name of the tenant
          type: string
        description:
          description: the description
          type: string
        username:
          description: the username
          type: string
        password:
          description: the password
          format: password
          type: string
        icon:
          description: the path of the icon
          type: string
        state:
          description: the tenant state
          enum:
          - ACTIVATED
          - DEACTIVATED
          type: string
      type: object
    PlatformLicense:
      description: ""
      example:
        duration: duration
        subscriptionStartPeriod: subscriptionStartPeriod
        licenseMode: licenseMode
        numberOfCPUCores: numberOfCPUCores
        requestKey: requestKey
        subscriptionEndPeriod: subscriptionEndPeriod
        caseCounter: 6
        licenseStartDate: licenseStartDate
        licenseExpirationDate: licenseExpirationDate
        edition: edition
        caseCounterLimit: 0
      properties:
        licenseStartDate:
          description: date with format `yyyy-MM-dd` - first day (included) of license
            file validity
          type: string
        duration:
          description: number of days for license file validity
          type: string
        licenseExpirationDate:
          description: date with format `yyyy-MM-dd` - last day (included) of license
            file validity
          type: string
        numberOfCPUCores:
          description: number of CPUs
          type: string
        edition:
          description: name of the Bonita edition enabled by the license
          type: string
        licenseMode:
          description: available mode enabled by the license
          type: string
        requestKey:
          description: |
            request key to use to generate a new license on the customer portal
            If you have a subscription that specifies case-counter licensing, additional fields are present:
          type: string
        subscriptionStartPeriod:
          description: date with format `yyyy-MM-dd` - first day (included) of current
            period for number of process instances provisioned
          type: string
        subscriptionEndPeriod:
          description: date with format `yyyy-MM-dd` - last day (included) of current
            period for number of process instances provisioned
          type: string
        caseCounterLimit:
          description: number of process instances provisioned for period between
            `subscriptionStartPeriod` and `subscriptionEndPeriod`
          format: int64
          type: integer
        caseCounter:
          description: number of consumed process instances for period between `subscriptionStartPeriod`
            and `subscriptionEndPeriod`
          format: int64
          type: integer
      type: object
    Page:
      example:
        updatedBy: updatedBy
        createdBy: createdBy
        urlToken: urlToken
        isProvided: true
        displayName: displayName
        lastUpdateDate: lastUpdateDate
        description: description
        id: id
        creationDate: creationDate
        contentName: contentName
      properties:
        id:
          description: page id
          type: string
        creationDate:
          description: date and time
          type: string
        createdBy:
          description: created by user id
          type: string
        isProvided:
          description: is provided
          type: boolean
        description:
          description: description
          type: string
        contentName:
          description: content name
          type: string
        displayName:
          description: custom page display name
          type: string
        updatedBy:
          description: updated by user id
          type: string
        lastUpdateDate:
          description: date and time
          type: string
        urlToken:
          description: custom page urlToken
          type: string
      type: object
    PageCreateRequest:
      example:
        pageZip: tmp_4338264789005487499.zip:new-bonita-angular-dashboard.zip
      properties:
        pageZip:
          description: Zip name as named in the temp folder after upload
          type: string
      type: object
    PageUpdateRequest:
      example:
        pageZip: tmp_4338264789005487499.zip:new-bonita-angular-dashboard.zip
      properties:
        pageZip:
          description: pageZip as named in the temp folder after upload
          type: string
      type: object
    Profile:
      description: Profile
      example:
        id: 101
        creationDate: 2014-12-04 16:29:23.434
        icon: /profiles/profileDefault.png
        createdBy: 1
        description: This is my custom profile
        name: MyCustomProfile
        is_default: false
        lastUpdateDate: 2014-12-04 16:29:23.434
        updatedBy: 1
      properties:
        id:
          description: profile id
          type: string
        creationDate:
          description: date and time of profile creation
          type: string
        icon:
          description: icon used in the portal to represent the profile
          type: string
        createdBy:
          description: id of the uer who created the profile
          type: string
        description:
          description: a description of the profile
          type: string
        name:
          description: profile name
          type: string
        isdefault:
          description: 'true | false '
          type: boolean
        lastUpdateDate:
          description: date and time of the last update to the profile
          type: string
        updatedBy:
          description: the id of the user who last updated the profile
          type: string
      type: object
    ProfileCreateRequest:
      example:
        name: MyCustomProfile
        description: This is my custom profile
      properties:
        description:
          description: a description of the profile
          type: string
        name:
          description: profile name
          type: string
      type: object
    ProfileUpdateRequest:
      example:
        displayName: My app
        description: My application description
      properties:
        description:
          description: description of the Profile
          type: string
        displayName:
          description: display name of the Profile
          type: string
      type: object
    ProfileEntry:
      description: Profile entry
      example:
        profile_id: profile_id
        parent_id: parent_id
        icon: icon
        name: name
        isCustom: true
        index: index
        description: description
        id: id
        page: page
        type: type
      properties:
        id:
          description: profileEntry id
          type: string
        icon:
          description: icon used in the portal to represent a profileEntry
          type: string
        index:
          description: position in a menu
          type: string
        profile_id:
          description: id of the profile that contains this profileEntry
          type: string
        page:
          description: pageToken (menu name or menu item name) used in a portal menu
            to identify the page associated with the profileEntry
          type: string
        description:
          description: description
          type: string
        name:
          description: name of the profileEntry
          type: string
        type:
          description: link (if menu item) | folder (if menu)
          type: string
        isCustom:
          description: ' true | false '
          type: boolean
        parent_id:
          description: id or parent profileEntry if in a folder
          type: string
      type: object
    ProfileEntryCreateRequest:
      example:
        page: tasklistingadmin
        parent_id: "0"
        name: Test menu
        profile_id: "102"
        type: link
        isCustom: false
      properties:
        profile_id:
          description: id of the profile that contains this profileEntry
          type: string
        page:
          description: pageToken (menu name or menu item name) used in a portal menu
            to identify the page associated with the profileEntry
          type: string
        description:
          description: description
          type: string
        name:
          description: name of the profileEntry
          type: string
        type:
          description: link (if menu item) | folder (if menu)
          type: string
        isCustom:
          description: ' true | false '
          type: boolean
        parent_id:
          description: id or parent profileEntry if in a folder
          type: string
      type: object
    ProfileEntryUpdateRequest:
      example:
        page: tasklistingadmin
        parent_id: "0"
        name: Test menu
        profile_id: "102"
        type: link
        isCustom: false
      properties:
        profile_id:
          description: id of the profile that contains this profileEntry
          type: string
        page:
          description: pageToken (menu name or menu item name) used in a portal menu
            to identify the page associated with the profileEntry
          type: string
        description:
          description: description
          type: string
        name:
          description: name of the profileEntry
          type: string
        type:
          description: link (if menu item) | folder (if menu)
          type: string
        isCustom:
          description: ' true | false '
          type: boolean
        parent_id:
          description: id or parent profileEntry if in a folder
          type: string
      type: object
    ProfileMember:
      description: Profile member
      example:
        id: 204
        profile_id: 2
        role_id: -1
        group_id: -1
        user_id: 101
      properties:
        id:
          description: profile member id
          type: string
        profile_id:
          description: id of the profile for this mapping
          type: string
        role_id:
          description: "id of role, or -1 if the member type is not role"
          type: string
        group_id:
          description: "id of group, or -1 if the member type is not group"
          type: string
        user_id:
          description: "id of user, or -1 if the member type is not user"
          type: string
      type: object
    ProfileMemberCreateRequest:
      example:
        profile_id: "2"
        member_type: USER
        user_id: "101"
      properties:
        profile_id:
          description: id of the profile for this mapping
          type: string
        role_id:
          description: "id of role, or -1 if the member type is not role"
          type: string
        group_id:
          description: "id of group, or -1 if the member type is not group"
          type: string
        user_id:
          description: "id of user, or -1 if the member type is not user"
          type: string
        member_type:
          description: member type
          enum:
          - USER
          - ROLE
          - GROUP
          type: string
      type: object
    ThemeCreateRequest:
      deprecated: true
      description: "Since Bonita 7.13, theme management is deprecated"
      example:
        type: portal
        zipFilePathportal: tmp_1939634566964075173.zip
      properties:
        type:
          description: theme type
          enum:
          - portal
          - mobile
          type: string
        zipFilePathportal:
          description: tmp zip file Path as uploaded to portal
          type: string
      type: object
    ThemeRestoreRequest:
      deprecated: true
      description: "Since Bonita 7.13, theme management is deprecated"
      example:
        type: portal
      properties:
        type:
          description: theme type
          enum:
          - portal
          - mobile
          type: string
      type: object
    I18nlocale:
      description: ""
      example:
        name: English
        locale: en
      properties:
        name:
          description: Name of the language
          type: string
        locale:
          description: code of the locale
          type: string
      type: object
    I18ntranslation:
      additionalProperties:
        type: string
      description: ""
      example:
        value: Gehen Sie dazu zum %profilelink%.
        key: "To do so, go to %profilelink%."
      type: object
    Session:
      example:
        user_id: -1
        user_name: install
        session_id: "501670672784361704"
        conf: "[\"F2A1B8E895F82077F59E4F11D001FC5823BC629E\",\"CEEE6B727AB3EA8834DB0A732A1D8E8B230EE368\"\
          ,\"53A5CA40F466070283D58B8069C98F36A6D4142C\",\"CA34A74DEF742742DAF395904D87FB1CC5EEF78B\"\
          ,\"1E49E265B8708F2B474226C9F6211A427E2ADC02\",\"691A18FC27888346B838C65BF73858673D85DF4A\"\
          ,\"835E3A67C0516F6F5178468E3A9CCC7FE8F3AF52\",\"74CD60A3CD84EEE4E13C17197508DAFEA2927F9A\"\
          ,\"98B3E3369C0724F4CCD784EF257EA7E0AE7BDCB2\"]"
        is_technical_user: true
        is_guest_user: false
        version: 7.11.1
        copyright: Bonitasoft © 2020
      properties:
        user_id:
          description: user id
          type: string
        user_name:
          description: user name
          type: string
        session_id:
          description: the session id
          type: string
        conf:
          description: conf
          type: string
        is_technical_user:
          description: "is technical user: true|false"
          type: boolean
        is_guest_user:
          description: "is technical user: true|false"
          type: boolean
        version:
          description: bonita version
          type: string
        copyright:
          description: bonita copyright
          type: string
      type: object
    SystemTenant:
      description: ""
      example:
        id: 1
        paused: false
      properties:
        id:
          description: system tenant id
          type: string
        paused:
          description: whether the system tenant is paused or not
          type: boolean
      type: object
    TenantPauseRequest:
      example:
        paused: true
      properties:
        paused:
          description: wether the system tenant should be paused or not
          type: string
      type: object
    MaintenanceDetails:
      example:
        maintenanceState: DISABLED
        maintenanceMessage: maintenance msg
        maintenanceMessageActive: true
      properties:
        maintenanceState:
          description: maintenance state
          enum:
          - ENABLED
          - DISABLED
          type: string
        maintenanceMessage:
          description: maintenance message
          type: string
        maintenanceMessageActive:
          description: is maintenance message active
          type: boolean
      type: object
    License:
      description: Bonita license
      example:
        owner: owner
        edition: edition
        nb_cpu_cores: nb_cpu_cores
        expirationDate: 0
      properties:
        owner:
          description: Owner of the license
          type: string
        edition:
          description: "name of the Bonita edition enabled by the license (Community,...)"
          type: string
        nb_cpu_cores:
          description: number of CPUs
          type: string
        expirationDate:
          description: "License expiration date with format: `yyyy-MM-dd HH:mm:ss.SSS`"
          format: int64
          type: integer
      type: object
    Bdm:
      description: ""
      example:
        id: "309"
        name: client_bdm.zip
        type: BDM
        state: INSTALLED
        lastUpdatedBy: -1
        lastUpdateDate: 2018-01-17T17:05:36.671Z
      properties:
        id:
          description: BDM id
          type: string
        name:
          description: BDM name
          type: string
        type:
          description: BDM type
          type: string
        state:
          $ref: '#/components/schemas/TenantResourceState'
        lastUpdatedBy:
          default: "-1"
          description: This value is always -1 because only the tenant_technical_user
            can install BDM.
          type: string
        lastUpdateDate:
          description: Last date when the BDM was installed or updated.
          type: string
      type: object
    BDMInstallRequest:
      example:
        fileUpload: tmp_uploaded_bdm.zip
      properties:
        fileUpload:
          description: the temporary file name once uploaded on the server
          type: string
      type: object
    importApplication_request:
      properties:
        applicationsDataUpload:
          description: Uploaded file
          type: string
        importPolicy:
          description: Import policy
          type: string
    importBDMAccessControl_request:
      properties:
        bdmAccessControlUpload:
          description: The temporary name of the previously uploaded file to install
          type: string
    platformLogin_request:
      properties:
        username:
          description: the username
          type: string
        password:
          description: the password
          format: password
          type: string
        redirect:
          description: '"true" or "false". "false" indicates that the service should
            not redirect to Bonita Portal (after a successful login) or to the login
            page (after a login failure).'
          type: string
      type: object
    uploadApplicationConfiguration_request:
      properties:
        configuration:
          format: binary
          type: string
      required:
      - configuration
      type: object
    importOrganization_request:
      properties:
        organizationDataUpload:
          description: Uploaded file
          type: string
        importPolicy:
          description: Import policy
          type: string
    importProfiles_request:
      properties:
        profilesDataUpload:
          description: Uploaded file
          type: string
        importPolicy:
          description: Import policy
          type: string
    ProcessInstanceInfo_flowNodeStatesCounters_value:
      properties:
        completed:
          description: number of instance of the given Flow Node in completed state
          format: int64
          type: integer
        skipped:
          description: number of instance of the given Flow Node in skipped state
          format: int64
          type: integer
        cancelled:
          description: number of instance of the given Flow Node in cancelled state
          format: int64
          type: integer
        aborted:
          description: number of instance of the given Flow Node in aborted state
          format: int64
          type: integer
        ready:
          description: number of instance of the given Flow Node in ready state
          format: int64
          type: integer
        failed:
          description: number of instance of the given Flow Node in failed state
          format: int64
          type: integer
        executing:
          description: number of instance of the given Flow Node in executing state
          format: int64
          type: integer
        waiting:
          description: number of instance of the given Flow Node in waiting state
          format: int64
          type: integer
        initializing:
          description: number of instance of the given Flow Node in initializing state
          format: int64
          type: integer
        completing:
          description: number of instance of the given Flow Node in completing state
          format: int64
          type: integer
      type: object
    ProcessInfo_flowNodeStatesCounters_value:
      properties:
        ready:
          description: number of instance of the given Flow Node in ready state
          format: int64
          type: integer
        failed:
          description: number of instance of the given Flow Node in failed state
          format: int64
          type: integer
        executing:
          description: number of instance of the given Flow Node in executing state
          format: int64
          type: integer
        waiting:
          description: number of instance of the given Flow Node in waiting state
          format: int64
          type: integer
        initializing:
          description: number of instance of the given Flow Node in initializing state
          format: int64
          type: integer
        completing:
          description: number of instance of the given Flow Node in completing state
          format: int64
          type: integer
      type: object
    Message_messageContent_value:
      example:
        type: java.lang.String
        value: value
      properties:
        value:
          description: ""
          type: string
        type:
          description: |
            Date types must be in the ISO-8601 format. When not set, the type is guessed using the value.
            Be careful as it can lead to type inconsistency in the target process (eg: a java.lang.Long is expected and the guessed type is a java.lang.Integer)
          enum:
          - java.lang.String
          - java.lang.Boolean
          - java.lang.Integer
          - java.lang.Double
          - java.lang.Float
          - java.lang.Long
          - java.util.Date
          - java.time.LocalDate
          - java.time.LocalDateTime
          - java.time.OffsetDateTime
          type: string
      required:
      - value
      type: object
  securitySchemes:
    bonita_auth:
      description: |
        To call the REST API, you must first log on with a user registered in the Engine database. Please refer to the __[Login API](#operation/login)__ operations section.
      in: cookie
      name: JSESSIONID
      type: apiKey
    bonita_token:
      description: |
        To call the REST API, you must first log on with a user registered in the Engine database. Please refer to the __[Login API](#operation/login)__ operations section.
      in: header
      name: X-Bonita-API-Token
      type: apiKey
x-tagGroups:
- name: Authentication
  tags:
  - PortalAuthentication
  - PlatformAuthentication
- name: Application
  tags:
  - Application
  - ApplicationMenu
  - ApplicationPage
  - FormMapping
- name: BDM
  tags:
  - BDM
  - BusinessDataQuery
  - BDMAccessControl
- name: BPM
  tags:
  - Activity
  - ArchivedActivity
  - HumanTask
  - ManualTask
  - Task
  - UserTask
  - ArchivedHumanTask
  - ArchivedManualTask
  - ArchivedTask
  - ArchivedUserTask
  - ActivityVariable
  - ArchivedActivityVariable
  - ProcessInstanceVariable
  - ArchivedProcessInstanceVariable
  - ProcessInstanceDocument
  - ArchivedProcessInstanceDocument
  - Actor
  - ActorMember
  - ProcessInstance
  - ArchivedProcessInstance
  - ProcessInstanceInfo
  - ProcessInstanceComment
  - ArchivedProcessInstanceComment
  - Process
  - Diagram
  - ProcessInfo
  - ProcessParameter
  - ProcessResolutionProblem
  - ProcessSupervisor
  - ProcessConnectorDependency
  - ConnectorFailure
  - ConnectorInstance
  - ArchivedConnectorInstance
  - FlowNode
  - ArchivedFlowNode
  - TimerEventTrigger
  - Message
  - Signal
- name: Custom user info
  tags:
  - CustomUserDefinition
  - CustomUserValue
  - CustomUser
- name: Identity
  tags:
  - ProfessionalContactData
  - Group
  - Membership
  - Role
  - User
  - Authentication
- name: Platform
  tags:
  - PlatformAuthentication
  - Platform
  - PlatformTenant
  - Tenant
  - License
- name: Portal
  tags:
  - Page
  - Profile
  - ProfileEntry
  - ProfileMember
  - Theme
  - Upload
- name: System
  tags:
  - I18nlocale
  - I18ntranslation
  - Session
  - Maintenance
  - SystemTenant
- name: Other
  tags:
  - RestAPIextensions

